//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_user_pub.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelUserPub extends _ModelUserPub {
  //
  //
  //

  static const CLASS = 'ModelUserPub';
  static const MODEL_ID = 'model_user_pub';

  static const K_DISPLAY_NAME = 'display_name';
  static const K_DISPLAY_NAME_SEARCHABLE = 'display_name_searchable';
  static const K_EMAIL_SEARCHABLE = 'email_searchable';
  static const K_ID = 'id';
  static const K_UPLOADED_MEDIA = 'uploaded_media';
  static const K_WHEN_CREATED = 'when_created';
  static const K_WHEN_DELETED = 'when_deleted';

  String? displayName;
  String? displayNameSearchable;
  String? emailSearchable;
  Map<DateTime, ModelMediaEntry>? uploadedMedia;
  Map<String, DateTime>? whenCreated;
  Map<String, DateTime>? whenDeleted;

  //
  //
  //

  ModelUserPub({
    String? id,
    this.displayName,
    this.displayNameSearchable,
    this.emailSearchable,
    this.uploadedMedia,
    this.whenCreated,
    this.whenDeleted,
  }) {
    this.id = id;
  }

  //
  //
  //

  ModelUserPub.unsafe({
    String? id,
    this.displayName,
    this.displayNameSearchable,
    this.emailSearchable,
    this.uploadedMedia,
    this.whenCreated,
    this.whenDeleted,
  }) {
    this.id = id;
  }

  //
  //
  //

  factory ModelUserPub.from(
    Model? other,
  ) {
    return ModelUserPub.fromJson(
      other is GenericModel ? other.data : other?.toJson(),
    );
  }

  //
  //
  //

  factory ModelUserPub.of(
    ModelUserPub? other,
  ) {
    return ModelUserPub.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelUserPub.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelUserPub.fromJson(decoded);
      } else {
        return ModelUserPub.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelUserPub.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelUserPub.unsafe(
        displayName: otherData?[K_DISPLAY_NAME]?.toString().trim().nullIfEmpty,
        displayNameSearchable: otherData?[K_DISPLAY_NAME_SEARCHABLE]
            ?.toString()
            .trim()
            .nullIfEmpty
            ?.toLowerCase(),
        emailSearchable: otherData?[K_EMAIL_SEARCHABLE]
            ?.toString()
            .trim()
            .nullIfEmpty
            ?.toLowerCase(),
        id: otherData?[K_ID]?.toString().trim().nullIfEmpty,
        uploadedMedia: letMap(otherData?[K_UPLOADED_MEDIA])
            ?.map(
              (final p0, final p1) => MapEntry(
                () {
                  final a = p0;
                  return a != null ? DateTime.tryParse(a)?.toUtc() : null;
                }(),
                () {
                  final a = letMap<String, dynamic>(p1);
                  return a != null ? ModelMediaEntry.fromJson(a) : null;
                }(),
              ),
            )
            .nonNulls
            .nullIfEmpty
            ?.cast(),
        whenCreated: letMap(otherData?[K_WHEN_CREATED])
            ?.map(
              (final p0, final p1) => MapEntry(
                p0?.toString().trim().nullIfEmpty,
                () {
                  final a = p1;
                  return a != null ? DateTime.tryParse(a)?.toUtc() : null;
                }(),
              ),
            )
            .nonNulls
            .nullIfEmpty
            ?.cast(),
        whenDeleted: letMap(otherData?[K_WHEN_DELETED])
            ?.map(
              (final p0, final p1) => MapEntry(
                p0?.toString().trim().nullIfEmpty,
                () {
                  final a = p1;
                  return a != null ? DateTime.tryParse(a)?.toUtc() : null;
                }(),
              ),
            )
            .nonNulls
            .nullIfEmpty
            ?.cast(),
      );
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelUserPub.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == MODEL_ID) {
        return ModelUserPub.fromJson(uri.queryParameters);
      } else {
        return ModelUserPub.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  static ModelUserPub? convert(
    Model? other,
  ) {
    return other != null ? ModelUserPub.from(other) : null;
  }

  //
  //
  //

  static ModelUserPub? fromPool({
    required Iterable<ModelUserPub>? pool,
    required String? id,
  }) {
    return id != null ? pool?.firstWhereOrNull((e) => e.id == id) : null;
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_DISPLAY_NAME: displayName?.toString().trim().nullIfEmpty,
        K_DISPLAY_NAME_SEARCHABLE:
            displayNameSearchable?.toString().trim().nullIfEmpty?.toLowerCase(),
        K_EMAIL_SEARCHABLE:
            emailSearchable?.toString().trim().nullIfEmpty?.toLowerCase(),
        K_ID: id?.toString().trim().nullIfEmpty,
        K_UPLOADED_MEDIA: uploadedMedia
            ?.map(
              (final p0, final p1) => MapEntry(
                p0?.toUtc()?.toIso8601String(),
                p1?.toJson(),
              ),
            )
            .nonNulls
            .nullIfEmpty,
        K_WHEN_CREATED: whenCreated
            ?.map(
              (final p0, final p1) => MapEntry(
                p0?.toString().trim().nullIfEmpty,
                p1?.toUtc()?.toIso8601String(),
              ),
            )
            .nonNulls
            .nullIfEmpty,
        K_WHEN_DELETED: whenDeleted
            ?.map(
              (final p0, final p1) => MapEntry(
                p0?.toString().trim().nullIfEmpty,
                p1?.toUtc()?.toIso8601String(),
              ),
            )
            .nonNulls
            .nullIfEmpty,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelUserPub.unsafe() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelUserPub.unsafe()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelUserPub.fromJson(otherData);
      other.displayName != null ? this.displayName = other.displayName : null;
      other.displayNameSearchable != null
          ? this.displayNameSearchable = other.displayNameSearchable
          : null;
      other.emailSearchable != null
          ? this.emailSearchable = other.emailSearchable
          : null;
      other.id != null ? this.id = other.id : null;
      other.uploadedMedia != null
          ? this.uploadedMedia = other.uploadedMedia
          : null;
      other.whenCreated != null ? this.whenCreated = other.whenCreated : null;
      other.whenDeleted != null ? this.whenDeleted = other.whenDeleted : null;
    }
  }

  //
  //
  //

  String get modelId => MODEL_ID;
}
