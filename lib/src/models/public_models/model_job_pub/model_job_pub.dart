//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY XYZ_GENIE
// See: https://github.com/robmllze/xyz_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

import 'dart:collection';
import 'dart:ui';

import '/_common.dart';

part '_model_job_pub.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@GenerateModel(
  shouldInherit: true,
  fields: {
    ...PUBLIC_MODEL_FIELDS,
    ('clock_ins?', Map<DateTime, String>),
    ('clock_outs?', Map<DateTime, String>),
    ('when_opened?', Map<String, DateTime>),
    ('when_closed?', Map<String, DateTime>),
    ('todo_book?', Map<DateTime, ModelTodoEntry>),
  },
)
abstract class _ModelJobPub extends Model implements PublicModel {}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

extension ModelJobPubExtension on ModelJobPub {
  //
  //
  //

  bool canClockIn(String? pid) {
    final lastClockIn = this.lastClockInFor(pid);
    final lastClockOut = this.lastClockOutFor(pid);
    if (lastClockIn != null && lastClockOut != null) {
      return lastClockIn.isBefore(lastClockOut);
    }
    if (lastClockIn == null && lastClockOut != null) {
      return true;
    }
    if (lastClockIn == null && lastClockOut == null) {
      return true;
    }
    return false;
  }

  DateTime? lastClockInFor(String? pid) => (this.clockInsFor(pid).toList()..sort()).lastOrNull;

  Iterable<DateTime> clockInsFor(String? pid) =>
      this.clockIns?.entries.where((e) => e.value == pid).map((e) => e.key) ?? [];

  bool canClockOut(String? pid) {
    final lastClockIn = this.lastClockInFor(pid);
    final lastClockOut = this.lastClockOutFor(pid);
    if (lastClockIn != null && lastClockOut != null) {
      return lastClockIn.isAfter(lastClockOut);
    }
    if (lastClockIn != null && lastClockOut == null) {
      return true;
    }
    if (lastClockIn == null && lastClockOut == null) {
      return false;
    }
    return false;
  }

  DateTime? lastClockOutFor(String? pid) => (this.clockOutsFor(pid).toList()..sort()).lastOrNull;

  Iterable<DateTime> clockOutsFor(String? pid) =>
      this.clockOuts?.entries.where((e) => e.value == pid).map((e) => e.key) ?? [];

  //
  //
  //

  Iterable<({DateTime date, Duration? durationSinceClockIn})> clockedDatesFor(String? pid) {
    final clockInDates = this.clockInsFor(pid);
    final clockOutDates = this.clockOutsFor(pid);

    // Combine and label clock-in and clock-out dates
    final events = <DateTime, bool>{};
    for (var clockIn in clockInDates) {
      events[clockIn] = true; // true for clock-in
    }
    for (var clockOut in clockOutDates) {
      events[clockOut] = false; // false for clock-out
    }

    // Sort the events by date
    final sortedEvents = events.entries.toList()..sort((a, b) => a.key.compareTo(b.key));

    // Prepare to track the last clock-in date
    DateTime? lastClockIn;
    final result = Queue<({DateTime date, Duration? durationSinceClockIn})>();

    // Iterate through sorted events to calculate durations
    for (var event in sortedEvents) {
      final date = event.key.toLocal();
      final clockIn = event.value;
      if (clockIn) {
        lastClockIn = date;
        result.addFirst((date: date, durationSinceClockIn: null)); // No duration for clock-in
      } else {
        if (lastClockIn != null) {
          final durationSinceClockIn = date.difference(lastClockIn);
          result.addFirst((date: date, durationSinceClockIn: durationSinceClockIn));
        } else {
          result.addFirst((date: date, durationSinceClockIn: null));
        }
      }
    }

    return result;
  }

  //
  //
  //

  // Opened.
  Iterable<DateTime> get datesOpened => this.whenOpened?.values ?? [];
  DateTime? get openedAt => getFirstDate(this.datesOpened);
  String? get openedById =>
      this.whenOpened?.entries.firstWhereOrNull((e) => e.value == this.openedAt)?.key;
  bool get isOpened => this.whenOpened != null;
  bool isOpenedBy({required String id}) => this.whenOpened?.keys.contains(id) == true;

  // Closed.
  Iterable<DateTime> get datesClosed => this.whenClosed?.values ?? [];
  DateTime? get closedAt => getFirstDate(this.datesClosed);
  String? get closedById =>
      this.whenClosed?.entries.firstWhereOrNull((e) => e.value == this.closedAt)?.key;
  bool get isClosed => this.whenClosed != null;
  bool isClosedBy({required String id}) => this.whenClosed?.keys.contains(id) == true;
}
