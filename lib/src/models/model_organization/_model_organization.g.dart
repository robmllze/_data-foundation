//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_organization.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelOrganization extends _ModelOrganization {
  //
  //
  //

  static const K_CREATED_AT = 'created_at';
  static const K_CREATED_BY = 'created_by';
  static const K_DELETED_AT = 'deleted_at';
  static const K_DELETED_BY = 'deleted_by';
  static const K_ID = 'id';
  static const K_PID = 'pid';
  static const K_SEED = 'seed';

  static const CLASS = 'ModelOrganization';

  @override
  String get $class => CLASS;

  DateTime? _createdAt;
  String? _createdBy;
  DateTime? _deletedAt;
  String? _deletedBy;
  String? _id;
  String? _pid;
  String? _seed;

  //
  //
  //

  ModelOrganization.empty();

  //
  //
  //

  factory ModelOrganization({
    DateTime? createdAt,
    String? createdBy,
    DateTime? deletedAt,
    String? deletedBy,
    String? id,
    String? pid,
    String? seed,
  }) {
    return ModelOrganization.b(
      createdAt: createdAt,
      createdBy: createdBy,
      deletedAt: deletedAt,
      deletedBy: deletedBy,
      id: id,
      pid: pid,
      seed: seed,
    );
  }

  //
  //
  //

  ModelOrganization.b({
    DateTime? createdAt,
    String? createdBy,
    DateTime? deletedAt,
    String? deletedBy,
    String? id,
    String? pid,
    String? seed,
  }) {
    this._createdAt = createdAt;
    this._createdBy = createdBy;
    this._deletedAt = deletedAt;
    this._deletedBy = deletedBy;
    this._id = id;
    this._pid = pid;
    this._seed = seed;
  }

  //
  //
  //

  factory ModelOrganization.from(
    Model? other,
  ) {
    return ModelOrganization.fromJson(
      letAs<GenericModel>(other)?.data ?? other?.toJson(),
    );
  }

  //
  //
  //

  static ModelOrganization? fromOrNull(
    Model? other,
  ) {
    return other != null ? ModelOrganization.from(other) : null;
  }

  //
  //
  //

  factory ModelOrganization.of(
    ModelOrganization? other,
  ) {
    return ModelOrganization.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelOrganization.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelOrganization.fromJson(decoded);
      } else {
        return ModelOrganization.empty();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelOrganization.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelOrganization.empty()
        ..$createdAt = otherData?[K_CREATED_AT]
        ..$createdBy = otherData?[K_CREATED_BY]
        ..$deletedAt = otherData?[K_DELETED_AT]
        ..$deletedBy = otherData?[K_DELETED_BY]
        ..$id = otherData?[K_ID]
        ..$pid = otherData?[K_PID]
        ..$seed = otherData?[K_SEED];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelOrganization.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelOrganization.fromJson(uri.queryParameters);
      } else {
        return ModelOrganization.b();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_CREATED_AT: this.$createdAt,
        K_CREATED_BY: this.$createdBy,
        K_DELETED_AT: this.$deletedAt,
        K_DELETED_BY: this.$deletedBy,
        K_ID: this.$id,
        K_PID: this.$pid,
        K_SEED: this.$seed,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelOrganization.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelOrganization.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelOrganization.fromJson(otherData);
      if (other._createdAt != null) {
        this.createdAt = other._createdAt!;
      }
      if (other._createdBy != null) {
        this.createdBy = other._createdBy!;
      }
      if (other._deletedAt != null) {
        this.deletedAt = other._deletedAt!;
      }
      if (other._deletedBy != null) {
        this.deletedBy = other._deletedBy!;
      }
      if (other._id != null) {
        this.id = other._id!;
      }
      if (other._pid != null) {
        this.pid = other._pid!;
      }
      if (other._seed != null) {
        this.seed = other._seed!;
      }
    }
  }

  //
  //
  //

  // createdAt.
  DateTime? get createdAt => this._createdAt;
  set createdAt(DateTime? v) => this._createdAt = v;
  dynamic get $createdAt => this._createdAt?.toUtc()?.toIso8601String();
  set $createdAt(v) => this._createdAt = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  // createdBy.
  String? get createdBy => this._createdBy;
  set createdBy(String? v) => this._createdBy = v;
  dynamic get $createdBy => this._createdBy?.toString().trim().nullIfEmpty;
  set $createdBy(v) => this._createdBy = v?.toString().trim().nullIfEmpty;

  // deletedAt.
  DateTime? get deletedAt => this._deletedAt;
  set deletedAt(DateTime? v) => this._deletedAt = v;
  dynamic get $deletedAt => this._deletedAt?.toUtc()?.toIso8601String();
  set $deletedAt(v) => this._deletedAt = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  // deletedBy.
  String? get deletedBy => this._deletedBy;
  set deletedBy(String? v) => this._deletedBy = v;
  dynamic get $deletedBy => this._deletedBy?.toString().trim().nullIfEmpty;
  set $deletedBy(v) => this._deletedBy = v?.toString().trim().nullIfEmpty;

  // id.
  String? get id => this._id;
  set id(String? v) => this._id = v;
  dynamic get $id => this._id?.toString().trim().nullIfEmpty;
  set $id(v) => this._id = v?.toString().trim().nullIfEmpty;

  // pid.
  String? get pid => this._pid;
  set pid(String? v) => this._pid = v;
  dynamic get $pid => this._pid?.toString().trim().nullIfEmpty;
  set $pid(v) => this._pid = v?.toString().trim().nullIfEmpty;

  // seed.
  String? get seed => this._seed;
  set seed(String? v) => this._seed = v;
  dynamic get $seed => this._seed?.toString().trim().nullIfEmpty;
  set $seed(v) => this._seed = v?.toString().trim().nullIfEmpty;
}
