//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_event.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelEvent extends _ModelEvent {
  //
  //
  //

  static const K_DEF = 'def';
  static const K_DEF_TYPE = 'def_type';
  static const K_DELETED_AT = 'deleted_at';
  static const K_DELETED_BY = 'deleted_by';
  static const K_ID = 'id';
  static const K_MEMBER_PIDS = 'member_pids';
  static const K_TIMEOUT = 'timeout';
  static const K_UPLOADED_MEDIA_IDS = 'uploaded_media_ids';
  static const K_WHEN_ARCHIVED = 'when_archived';
  static const K_WHEN_HIDDEN = 'when_hidden';
  static const K_WHEN_LIKED = 'when_liked';
  static const K_WHEN_READ = 'when_read';
  static const K_WHEN_RECEIVED = 'when_received';
  static const K_WHEN_SENT = 'when_sent';

  static const CLASS = 'ModelEvent';

  @override
  String get $class => CLASS;

  GenericModel? _def;
  EventDefType? _defType;
  DateTime? _deletedAt;
  String? _deletedBy;
  String? _id;
  Set<String>? _memberPids;
  int? _timeout;
  Set<String>? _uploadedMediaIds;
  Map<String, DateTime>? _whenArchived;
  Map<String, DateTime>? _whenHidden;
  Map<String, DateTime>? _whenLiked;
  Map<String, DateTime>? _whenRead;
  Map<String, DateTime>? _whenReceived;
  Map<String, DateTime>? _whenSent;

  //
  //
  //

  ModelEvent.empty();

  //
  //
  //

  factory ModelEvent({
    GenericModel? def,
    EventDefType? defType,
    DateTime? deletedAt,
    String? deletedBy,
    required String id,
    required Set<String> memberPids,
    int? timeout,
    Set<String>? uploadedMediaIds,
    Map<String, DateTime>? whenArchived,
    Map<String, DateTime>? whenHidden,
    Map<String, DateTime>? whenLiked,
    Map<String, DateTime>? whenRead,
    Map<String, DateTime>? whenReceived,
    Map<String, DateTime>? whenSent,
  }) {
    return ModelEvent.b(
      def: def,
      defType: defType,
      deletedAt: deletedAt,
      deletedBy: deletedBy,
      id: id,
      memberPids: memberPids,
      timeout: timeout,
      uploadedMediaIds: uploadedMediaIds,
      whenArchived: whenArchived,
      whenHidden: whenHidden,
      whenLiked: whenLiked,
      whenRead: whenRead,
      whenReceived: whenReceived,
      whenSent: whenSent,
    );
  }

  //
  //
  //

  ModelEvent.b({
    GenericModel? def,
    EventDefType? defType,
    DateTime? deletedAt,
    String? deletedBy,
    String? id,
    Set<String>? memberPids,
    int? timeout,
    Set<String>? uploadedMediaIds,
    Map<String, DateTime>? whenArchived,
    Map<String, DateTime>? whenHidden,
    Map<String, DateTime>? whenLiked,
    Map<String, DateTime>? whenRead,
    Map<String, DateTime>? whenReceived,
    Map<String, DateTime>? whenSent,
  }) {
    assert(id != null);
    assert(memberPids != null);
    this._def = def;
    this._defType = defType;
    this._deletedAt = deletedAt;
    this._deletedBy = deletedBy;
    this._id = id;
    this._memberPids = memberPids;
    this._timeout = timeout;
    this._uploadedMediaIds = uploadedMediaIds;
    this._whenArchived = whenArchived;
    this._whenHidden = whenHidden;
    this._whenLiked = whenLiked;
    this._whenRead = whenRead;
    this._whenReceived = whenReceived;
    this._whenSent = whenSent;
  }

  //
  //
  //

  factory ModelEvent.from(
    Model? other,
  ) {
    return ModelEvent.fromJson(
      letAs<GenericModel>(other)?.data ?? other?.toJson(),
    );
  }

  //
  //
  //

  factory ModelEvent.of(
    ModelEvent? other,
  ) {
    return ModelEvent.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelEvent.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelEvent.fromJson(decoded);
      } else {
        return ModelEvent.empty();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelEvent.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelEvent.empty()
        ..$def = otherData?[K_DEF]
        ..$defType = otherData?[K_DEF_TYPE]
        ..$deletedAt = otherData?[K_DELETED_AT]
        ..$deletedBy = otherData?[K_DELETED_BY]
        ..$id = otherData?[K_ID]
        ..$memberPids = otherData?[K_MEMBER_PIDS]
        ..$timeout = otherData?[K_TIMEOUT]
        ..$uploadedMediaIds = otherData?[K_UPLOADED_MEDIA_IDS]
        ..$whenArchived = otherData?[K_WHEN_ARCHIVED]
        ..$whenHidden = otherData?[K_WHEN_HIDDEN]
        ..$whenLiked = otherData?[K_WHEN_LIKED]
        ..$whenRead = otherData?[K_WHEN_READ]
        ..$whenReceived = otherData?[K_WHEN_RECEIVED]
        ..$whenSent = otherData?[K_WHEN_SENT];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelEvent.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelEvent.fromJson(uri.queryParameters);
      } else {
        return ModelEvent.b();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  static ModelEvent? convert(
    Model? other,
  ) {
    return other != null ? ModelEvent.from(other) : null;
  }

  //
  //
  //

  static ModelEvent? fromPool({
    required Iterable<ModelEvent>? pool,
    required String? id,
  }) {
    return id != null ? pool?.firstWhereOrNull((e) => e.id == id) : null;
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_DEF: this.$def,
        K_DEF_TYPE: this.$defType,
        K_DELETED_AT: this.$deletedAt,
        K_DELETED_BY: this.$deletedBy,
        K_ID: this.$id,
        K_MEMBER_PIDS: this.$memberPids,
        K_TIMEOUT: this.$timeout,
        K_UPLOADED_MEDIA_IDS: this.$uploadedMediaIds,
        K_WHEN_ARCHIVED: this.$whenArchived,
        K_WHEN_HIDDEN: this.$whenHidden,
        K_WHEN_LIKED: this.$whenLiked,
        K_WHEN_READ: this.$whenRead,
        K_WHEN_RECEIVED: this.$whenReceived,
        K_WHEN_SENT: this.$whenSent,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelEvent.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelEvent.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelEvent.fromJson(otherData);
      if (other._def != null) {
        this.def = other._def!;
      }
      if (other._defType != null) {
        this.defType = other._defType!;
      }
      if (other._deletedAt != null) {
        this.deletedAt = other._deletedAt!;
      }
      if (other._deletedBy != null) {
        this.deletedBy = other._deletedBy!;
      }
      if (other._id != null) {
        this.id = other._id!;
      }
      if (other._memberPids != null) {
        this.memberPids = other._memberPids!;
      }
      if (other._timeout != null) {
        this.timeout = other._timeout!;
      }
      if (other._uploadedMediaIds != null) {
        this.uploadedMediaIds = other._uploadedMediaIds!;
      }
      if (other._whenArchived != null) {
        this.whenArchived = other._whenArchived!;
      }
      if (other._whenHidden != null) {
        this.whenHidden = other._whenHidden!;
      }
      if (other._whenLiked != null) {
        this.whenLiked = other._whenLiked!;
      }
      if (other._whenRead != null) {
        this.whenRead = other._whenRead!;
      }
      if (other._whenReceived != null) {
        this.whenReceived = other._whenReceived!;
      }
      if (other._whenSent != null) {
        this.whenSent = other._whenSent!;
      }
    }
  }

  //
  //
  //

  // def.
  GenericModel? get def => this._def;
  set def(GenericModel? v) => this._def = v;
  dynamic get $def => this._def?.toJson();
  set $def(v) => this._def = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? GenericModel.fromJson(a) : null;
      }();

  // defType.
  EventDefType? get defType => this._defType;
  set defType(EventDefType? v) => this._defType = v;
  dynamic get $defType => this._defType?.name;
  set $defType(v) =>
      this._defType = EventDefType.values.valueOf(letAs<String>(v));

  // deletedAt.
  DateTime? get deletedAt => this._deletedAt;
  set deletedAt(DateTime? v) => this._deletedAt = v;
  dynamic get $deletedAt => this._deletedAt?.toUtc()?.toIso8601String();
  set $deletedAt(v) => this._deletedAt = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  // deletedBy.
  String? get deletedBy => this._deletedBy;
  set deletedBy(String? v) => this._deletedBy = v;
  dynamic get $deletedBy => this._deletedBy?.toString().trim().nullIfEmpty;
  set $deletedBy(v) => this._deletedBy = v?.toString().trim().nullIfEmpty;

  // id.
  String get id => this._id!;
  set id(String v) => this._id = v;
  dynamic get $id => (this._id?.toString().trim().nullIfEmpty)!;
  set $id(v) => this._id = v?.toString().trim().nullIfEmpty;

  // memberPids.
  Set<String> get memberPids => this._memberPids!;
  set memberPids(Set<String> v) => this._memberPids = v;
  dynamic get $memberPids => (this
      ._memberPids
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList())!;
  set $memberPids(v) => this._memberPids = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // timeout.
  int? get timeout => this._timeout;
  set timeout(int? v) => this._timeout = v;
  dynamic get $timeout => this._timeout;
  set $timeout(v) => this._timeout = letInt(v);

  // uploadedMediaIds.
  Set<String>? get uploadedMediaIds => this._uploadedMediaIds;
  set uploadedMediaIds(Set<String>? v) => this._uploadedMediaIds = v;
  dynamic get $uploadedMediaIds => this
      ._uploadedMediaIds
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  set $uploadedMediaIds(v) => this._uploadedMediaIds = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // whenArchived.
  Map<String, DateTime>? get whenArchived => this._whenArchived;
  set whenArchived(Map<String, DateTime>? v) => this._whenArchived = v;
  dynamic get $whenArchived => this
      ._whenArchived
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  set $whenArchived(v) => this._whenArchived = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // whenHidden.
  Map<String, DateTime>? get whenHidden => this._whenHidden;
  set whenHidden(Map<String, DateTime>? v) => this._whenHidden = v;
  dynamic get $whenHidden => this
      ._whenHidden
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  set $whenHidden(v) => this._whenHidden = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // whenLiked.
  Map<String, DateTime>? get whenLiked => this._whenLiked;
  set whenLiked(Map<String, DateTime>? v) => this._whenLiked = v;
  dynamic get $whenLiked => this
      ._whenLiked
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  set $whenLiked(v) => this._whenLiked = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // whenRead.
  Map<String, DateTime>? get whenRead => this._whenRead;
  set whenRead(Map<String, DateTime>? v) => this._whenRead = v;
  dynamic get $whenRead => this
      ._whenRead
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  set $whenRead(v) => this._whenRead = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // whenReceived.
  Map<String, DateTime>? get whenReceived => this._whenReceived;
  set whenReceived(Map<String, DateTime>? v) => this._whenReceived = v;
  dynamic get $whenReceived => this
      ._whenReceived
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  set $whenReceived(v) => this._whenReceived = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // whenSent.
  Map<String, DateTime>? get whenSent => this._whenSent;
  set whenSent(Map<String, DateTime>? v) => this._whenSent = v;
  dynamic get $whenSent => this
      ._whenSent
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  set $whenSent(v) => this._whenSent = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();
}
