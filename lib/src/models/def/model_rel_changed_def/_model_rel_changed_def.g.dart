//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_rel_changed_def.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelRelChangedDef extends Model {
  //
  //
  //

  static const K_RECEIVER_PID = 'receiver_pid';
  static const K_RELATIONSHIP_ID = 'relationship_id';
  static const K_SENDER_PID = 'sender_pid';

  static const CLASS = 'ModelRelChangedDef';

  @override
  String get $class => CLASS;

  String? _receiverPid;
  String? _relationshipId;
  String? _senderPid;

  //
  //
  //

  ModelRelChangedDef.empty();

  //
  //
  //

  factory ModelRelChangedDef({
    required String receiverPid,
    required String relationshipId,
    required String senderPid,
  }) {
    return ModelRelChangedDef.b(
      receiverPid: receiverPid,
      relationshipId: relationshipId,
      senderPid: senderPid,
    );
  }

  //
  //
  //

  ModelRelChangedDef.b({
    String? receiverPid,
    String? relationshipId,
    String? senderPid,
  }) {
    assert(receiverPid != null);
    assert(relationshipId != null);
    assert(senderPid != null);
    this._receiverPid = receiverPid;
    this._relationshipId = relationshipId;
    this._senderPid = senderPid;
  }

  //
  //
  //

  factory ModelRelChangedDef.from(
    Model? other,
  ) {
    return ModelRelChangedDef.fromJson(
      letAs<GenericModel>(other)?.data ?? other?.toJson(),
    );
  }

  //
  //
  //

  factory ModelRelChangedDef.of(
    ModelRelChangedDef? other,
  ) {
    return ModelRelChangedDef.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelRelChangedDef.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelRelChangedDef.fromJson(decoded);
      } else {
        return ModelRelChangedDef.empty();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelRelChangedDef.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelRelChangedDef.empty()
        ..$receiverPid = otherData?[K_RECEIVER_PID]
        ..$relationshipId = otherData?[K_RELATIONSHIP_ID]
        ..$senderPid = otherData?[K_SENDER_PID];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelRelChangedDef.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelRelChangedDef.fromJson(uri.queryParameters);
      } else {
        return ModelRelChangedDef.b();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  static ModelRelChangedDef? convert(
    Model? other,
  ) {
    return other != null ? ModelRelChangedDef.from(other) : null;
  }

  //
  //
  //

  static ModelRelChangedDef? fromPool({
    required Iterable<ModelRelChangedDef>? pool,
    required String? id,
  }) {
    return id != null ? pool?.firstWhereOrNull((e) => e.id == id) : null;
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_RECEIVER_PID: this.$receiverPid,
        K_RELATIONSHIP_ID: this.$relationshipId,
        K_SENDER_PID: this.$senderPid,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelRelChangedDef.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelRelChangedDef.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelRelChangedDef.fromJson(otherData);
      if (other._receiverPid != null) {
        this.receiverPid = other._receiverPid!;
      }
      if (other._relationshipId != null) {
        this.relationshipId = other._relationshipId!;
      }
      if (other._senderPid != null) {
        this.senderPid = other._senderPid!;
      }
    }
  }

  //
  //
  //

  // receiverPid.
  String get receiverPid => this._receiverPid!;
  set receiverPid(String v) => this._receiverPid = v;
  dynamic get $receiverPid =>
      (this._receiverPid?.toString().trim().nullIfEmpty)!;
  set $receiverPid(v) => this._receiverPid = v?.toString().trim().nullIfEmpty;

  // relationshipId.
  String get relationshipId => this._relationshipId!;
  set relationshipId(String v) => this._relationshipId = v;
  dynamic get $relationshipId =>
      (this._relationshipId?.toString().trim().nullIfEmpty)!;
  set $relationshipId(v) =>
      this._relationshipId = v?.toString().trim().nullIfEmpty;

  // senderPid.
  String get senderPid => this._senderPid!;
  set senderPid(String v) => this._senderPid = v;
  dynamic get $senderPid => (this._senderPid?.toString().trim().nullIfEmpty)!;
  set $senderPid(v) => this._senderPid = v?.toString().trim().nullIfEmpty;
}
