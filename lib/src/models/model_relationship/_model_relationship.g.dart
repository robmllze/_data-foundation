//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_relationship.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelRelationship extends _ModelRelationship {
  //
  //
  //

  static const K_CREATED_AT = 'created_at';
  static const K_CREATED_BY = 'created_by';
  static const K_DEF = 'def';
  static const K_DEF_TYPE = 'def_type';
  static const K_DELETED_AT = 'deleted_at';
  static const K_DELETED_BY = 'deleted_by';
  static const K_ID = 'id';
  static const K_MEMBER_PIDS = 'member_pids';
  static const K_UPLOADED_MEDIA_IDS = 'uploaded_media_ids';
  static const K_WHEN_DISABLED = 'when_disabled';
  static const K_WHEN_ENABLED = 'when_enabled';
  static const K_WHEN_NOTED = 'when_noted';

  static const CLASS = 'ModelRelationship';

  @override
  String get $class => CLASS;

  DateTime? createdAt;
  String? createdBy;
  GenericModel? def;
  RelationshipDefType? defType;
  DateTime? deletedAt;
  String? deletedBy;
  String? id;
  Set<String>? memberPids;
  Set<String>? uploadedMediaIds;
  Map<String, DateTime>? whenDisabled;
  Map<String, DateTime>? whenEnabled;
  Map<String, DateTime>? whenNoted;

  //
  //
  //

  ModelRelationship.empty();

  //
  //
  //

  factory ModelRelationship({
    DateTime? createdAt,
    String? createdBy,
    GenericModel? def,
    RelationshipDefType? defType,
    DateTime? deletedAt,
    String? deletedBy,
    String? id,
    Set<String>? memberPids,
    Set<String>? uploadedMediaIds,
    Map<String, DateTime>? whenDisabled,
    Map<String, DateTime>? whenEnabled,
    Map<String, DateTime>? whenNoted,
  }) {
    return ModelRelationship.b(
      createdAt: createdAt,
      createdBy: createdBy,
      def: def,
      defType: defType,
      deletedAt: deletedAt,
      deletedBy: deletedBy,
      id: id,
      memberPids: memberPids,
      uploadedMediaIds: uploadedMediaIds,
      whenDisabled: whenDisabled,
      whenEnabled: whenEnabled,
      whenNoted: whenNoted,
    );
  }

  //
  //
  //

  ModelRelationship.b({
    this.createdAt,
    this.createdBy,
    this.def,
    this.defType,
    this.deletedAt,
    this.deletedBy,
    this.id,
    this.memberPids,
    this.uploadedMediaIds,
    this.whenDisabled,
    this.whenEnabled,
    this.whenNoted,
  }) {}

  //
  //
  //

  factory ModelRelationship.from(
    Model? other,
  ) {
    return ModelRelationship.fromJson(
      letAs<GenericModel>(other)?.data ?? other?.toJson(),
    );
  }

  //
  //
  //

  static ModelRelationship? fromOrNull(
    Model? other,
  ) {
    return other != null ? ModelRelationship.from(other) : null;
  }

  //
  //
  //

  factory ModelRelationship.of(
    ModelRelationship? other,
  ) {
    return ModelRelationship.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelRelationship.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelRelationship.fromJson(decoded);
      } else {
        return ModelRelationship.empty();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelRelationship.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelRelationship.empty()
        ..$createdAt = otherData?[K_CREATED_AT]
        ..$createdBy = otherData?[K_CREATED_BY]
        ..$def = otherData?[K_DEF]
        ..$defType = otherData?[K_DEF_TYPE]
        ..$deletedAt = otherData?[K_DELETED_AT]
        ..$deletedBy = otherData?[K_DELETED_BY]
        ..$id = otherData?[K_ID]
        ..$memberPids = otherData?[K_MEMBER_PIDS]
        ..$uploadedMediaIds = otherData?[K_UPLOADED_MEDIA_IDS]
        ..$whenDisabled = otherData?[K_WHEN_DISABLED]
        ..$whenEnabled = otherData?[K_WHEN_ENABLED]
        ..$whenNoted = otherData?[K_WHEN_NOTED];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelRelationship.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelRelationship.fromJson(uri.queryParameters);
      } else {
        return ModelRelationship.b();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_CREATED_AT: this.$createdAt,
        K_CREATED_BY: this.$createdBy,
        K_DEF: this.$def,
        K_DEF_TYPE: this.$defType,
        K_DELETED_AT: this.$deletedAt,
        K_DELETED_BY: this.$deletedBy,
        K_ID: this.$id,
        K_MEMBER_PIDS: this.$memberPids,
        K_UPLOADED_MEDIA_IDS: this.$uploadedMediaIds,
        K_WHEN_DISABLED: this.$whenDisabled,
        K_WHEN_ENABLED: this.$whenEnabled,
        K_WHEN_NOTED: this.$whenNoted,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelRelationship.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelRelationship.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelRelationship.fromJson(otherData);
      if (other.createdAt != null) {
        this.createdAt = other.createdAt!;
      }
      if (other.createdBy != null) {
        this.createdBy = other.createdBy!;
      }
      if (other.def != null) {
        this.def = other.def!;
      }
      if (other.defType != null) {
        this.defType = other.defType!;
      }
      if (other.deletedAt != null) {
        this.deletedAt = other.deletedAt!;
      }
      if (other.deletedBy != null) {
        this.deletedBy = other.deletedBy!;
      }
      if (other.id != null) {
        this.id = other.id!;
      }
      if (other.memberPids != null) {
        this.memberPids = other.memberPids!;
      }
      if (other.uploadedMediaIds != null) {
        this.uploadedMediaIds = other.uploadedMediaIds!;
      }
      if (other.whenDisabled != null) {
        this.whenDisabled = other.whenDisabled!;
      }
      if (other.whenEnabled != null) {
        this.whenEnabled = other.whenEnabled!;
      }
      if (other.whenNoted != null) {
        this.whenNoted = other.whenNoted!;
      }
    }
  }

  //
  //
  //

  // createdAt.
  DateTime? get createdAtField => this.createdAt;
  set createdAtField(DateTime? v) => this.createdAt = v;
  @protected
  dynamic get $createdAt => this.createdAt?.toUtc()?.toIso8601String();
  @protected
  set $createdAt(v) => this.createdAt = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  // createdBy.
  String? get createdByField => this.createdBy;
  set createdByField(String? v) => this.createdBy = v;
  @protected
  dynamic get $createdBy => this.createdBy?.toString().trim().nullIfEmpty;
  @protected
  set $createdBy(v) => this.createdBy = v?.toString().trim().nullIfEmpty;

  // def.
  GenericModel? get defField => this.def;
  set defField(GenericModel? v) => this.def = v;
  @protected
  dynamic get $def => this.def?.toJson();
  @protected
  set $def(v) => this.def = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? GenericModel.fromJson(a) : null;
      }();

  // defType.
  RelationshipDefType? get defTypeField => this.defType;
  set defTypeField(RelationshipDefType? v) => this.defType = v;
  @protected
  dynamic get $defType => this.defType?.name;
  @protected
  set $defType(v) =>
      this.defType = RelationshipDefType.values.valueOf(letAs<String>(v));

  // deletedAt.
  DateTime? get deletedAtField => this.deletedAt;
  set deletedAtField(DateTime? v) => this.deletedAt = v;
  @protected
  dynamic get $deletedAt => this.deletedAt?.toUtc()?.toIso8601String();
  @protected
  set $deletedAt(v) => this.deletedAt = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  // deletedBy.
  String? get deletedByField => this.deletedBy;
  set deletedByField(String? v) => this.deletedBy = v;
  @protected
  dynamic get $deletedBy => this.deletedBy?.toString().trim().nullIfEmpty;
  @protected
  set $deletedBy(v) => this.deletedBy = v?.toString().trim().nullIfEmpty;

  // id.
  String? get idField => this.id;
  set idField(String? v) => this.id = v;
  @protected
  dynamic get $id => this.id?.toString().trim().nullIfEmpty;
  @protected
  set $id(v) => this.id = v?.toString().trim().nullIfEmpty;

  // memberPids.
  Set<String>? get memberPidsField => this.memberPids;
  set memberPidsField(Set<String>? v) => this.memberPids = v;
  @protected
  dynamic get $memberPids => this
      .memberPids
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $memberPids(v) => this.memberPids = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // uploadedMediaIds.
  Set<String>? get uploadedMediaIdsField => this.uploadedMediaIds;
  set uploadedMediaIdsField(Set<String>? v) => this.uploadedMediaIds = v;
  @protected
  dynamic get $uploadedMediaIds => this
      .uploadedMediaIds
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $uploadedMediaIds(v) => this.uploadedMediaIds = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // whenDisabled.
  Map<String, DateTime>? get whenDisabledField => this.whenDisabled;
  set whenDisabledField(Map<String, DateTime>? v) => this.whenDisabled = v;
  @protected
  dynamic get $whenDisabled => this
      .whenDisabled
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $whenDisabled(v) => this.whenDisabled = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // whenEnabled.
  Map<String, DateTime>? get whenEnabledField => this.whenEnabled;
  set whenEnabledField(Map<String, DateTime>? v) => this.whenEnabled = v;
  @protected
  dynamic get $whenEnabled => this
      .whenEnabled
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $whenEnabled(v) => this.whenEnabled = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // whenNoted.
  Map<String, DateTime>? get whenNotedField => this.whenNoted;
  set whenNotedField(Map<String, DateTime>? v) => this.whenNoted = v;
  @protected
  dynamic get $whenNoted => this
      .whenNoted
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toUtc()?.toIso8601String(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $whenNoted(v) => this.whenNoted = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = p1;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();
}
