//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_screen_configuration.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelScreenConfiguration extends _ModelScreenConfiguration {
  //
  //
  //

  static const K_ARGUMENTS = 'arguments';
  static const K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN =
      'is_accessible_only_if_logged_in';
  static const K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN_AND_VERIFIED =
      'is_accessible_only_if_logged_in_and_verified';
  static const K_IS_ACCESSIBLE_ONLY_IF_LOGGED_OUT =
      'is_accessible_only_if_logged_out';
  static const K_IS_REDIRECTABLE = 'is_redirectable';
  static const K_MAKEUP = 'makeup';
  static const K_NAVIGATION_CONTROLS_WIDGET = 'navigation_controls_widget';
  static const K_PATH = 'path';
  static const K_PREVIOUS_CONFIGURATION = 'previous_configuration';
  static const K_TITLE = 'title';

  static const CLASS = 'ModelScreenConfiguration';

  @override
  String get $class => CLASS;

  Map<dynamic, dynamic>? _arguments;
  bool? _isAccessibleOnlyIfLoggedIn;
  bool? _isAccessibleOnlyIfLoggedInAndVerified;
  bool? _isAccessibleOnlyIfLoggedOut;
  bool? _isRedirectable;
  dynamic _makeup;
  Widget? _navigationControlsWidget;
  String? _path;
  ModelScreenConfiguration? _previousConfiguration;
  String? _title;

  //
  //
  //

  ModelScreenConfiguration.empty();

  //
  //
  //

  factory ModelScreenConfiguration({
    Map<dynamic, dynamic>? arguments,
    bool? isAccessibleOnlyIfLoggedIn,
    bool? isAccessibleOnlyIfLoggedInAndVerified,
    bool? isAccessibleOnlyIfLoggedOut,
    bool? isRedirectable,
    dynamic makeup,
    Widget? navigationControlsWidget,
    String? path,
    ModelScreenConfiguration? previousConfiguration,
    String? title,
  }) {
    return ModelScreenConfiguration.b(
      arguments: arguments,
      isAccessibleOnlyIfLoggedIn: isAccessibleOnlyIfLoggedIn,
      isAccessibleOnlyIfLoggedInAndVerified:
          isAccessibleOnlyIfLoggedInAndVerified,
      isAccessibleOnlyIfLoggedOut: isAccessibleOnlyIfLoggedOut,
      isRedirectable: isRedirectable,
      makeup: makeup,
      navigationControlsWidget: navigationControlsWidget,
      path: path,
      previousConfiguration: previousConfiguration,
      title: title,
    );
  }

  //
  //
  //

  ModelScreenConfiguration.b({
    Map<dynamic, dynamic>? arguments,
    bool? isAccessibleOnlyIfLoggedIn,
    bool? isAccessibleOnlyIfLoggedInAndVerified,
    bool? isAccessibleOnlyIfLoggedOut,
    bool? isRedirectable,
    dynamic makeup,
    Widget? navigationControlsWidget,
    String? path,
    ModelScreenConfiguration? previousConfiguration,
    String? title,
  }) {
    this._arguments = arguments;
    this._isAccessibleOnlyIfLoggedIn = isAccessibleOnlyIfLoggedIn;
    this._isAccessibleOnlyIfLoggedInAndVerified =
        isAccessibleOnlyIfLoggedInAndVerified;
    this._isAccessibleOnlyIfLoggedOut = isAccessibleOnlyIfLoggedOut;
    this._isRedirectable = isRedirectable;
    this._makeup = makeup;
    this._navigationControlsWidget = navigationControlsWidget;
    this._path = path;
    this._previousConfiguration = previousConfiguration;
    this._title = title;
  }

  //
  //
  //

  factory ModelScreenConfiguration.from(
    Model? other,
  ) {
    return ModelScreenConfiguration.fromJson(
      letAs<GenericModel>(other)?.data ?? other?.toJson(),
    );
  }

  //
  //
  //

  factory ModelScreenConfiguration.of(
    ModelScreenConfiguration? other,
  ) {
    return ModelScreenConfiguration.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelScreenConfiguration.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelScreenConfiguration.fromJson(decoded);
      } else {
        return ModelScreenConfiguration.empty();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelScreenConfiguration.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelScreenConfiguration.empty()
        ..$arguments = otherData?[K_ARGUMENTS]
        ..$isAccessibleOnlyIfLoggedIn =
            otherData?[K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN]
        ..$isAccessibleOnlyIfLoggedInAndVerified =
            otherData?[K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN_AND_VERIFIED]
        ..$isAccessibleOnlyIfLoggedOut =
            otherData?[K_IS_ACCESSIBLE_ONLY_IF_LOGGED_OUT]
        ..$isRedirectable = otherData?[K_IS_REDIRECTABLE]
        ..$makeup = otherData?[K_MAKEUP]
        ..$navigationControlsWidget = otherData?[K_NAVIGATION_CONTROLS_WIDGET]
        ..$path = otherData?[K_PATH]
        ..$previousConfiguration = otherData?[K_PREVIOUS_CONFIGURATION]
        ..$title = otherData?[K_TITLE];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelScreenConfiguration.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelScreenConfiguration.fromJson(uri.queryParameters);
      } else {
        return ModelScreenConfiguration.b();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  static ModelScreenConfiguration? convert(
    Model? other,
  ) {
    return other != null ? ModelScreenConfiguration.from(other) : null;
  }

  //
  //
  //

  static ModelScreenConfiguration? fromPool({
    required Iterable<ModelScreenConfiguration>? pool,
    required String? id,
  }) {
    return id != null ? pool?.firstWhereOrNull((e) => e.id == id) : null;
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_ARGUMENTS: this.$arguments,
        K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN: this.$isAccessibleOnlyIfLoggedIn,
        K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN_AND_VERIFIED:
            this.$isAccessibleOnlyIfLoggedInAndVerified,
        K_IS_ACCESSIBLE_ONLY_IF_LOGGED_OUT: this.$isAccessibleOnlyIfLoggedOut,
        K_IS_REDIRECTABLE: this.$isRedirectable,
        K_MAKEUP: this.$makeup,
        K_NAVIGATION_CONTROLS_WIDGET: this.$navigationControlsWidget,
        K_PATH: this.$path,
        K_PREVIOUS_CONFIGURATION: this.$previousConfiguration,
        K_TITLE: this.$title,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelScreenConfiguration.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelScreenConfiguration.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelScreenConfiguration.fromJson(otherData);
      if (other._arguments != null) {
        this.arguments = other._arguments!;
      }
      if (other._isAccessibleOnlyIfLoggedIn != null) {
        this.isAccessibleOnlyIfLoggedIn = other._isAccessibleOnlyIfLoggedIn!;
      }
      if (other._isAccessibleOnlyIfLoggedInAndVerified != null) {
        this.isAccessibleOnlyIfLoggedInAndVerified =
            other._isAccessibleOnlyIfLoggedInAndVerified!;
      }
      if (other._isAccessibleOnlyIfLoggedOut != null) {
        this.isAccessibleOnlyIfLoggedOut = other._isAccessibleOnlyIfLoggedOut!;
      }
      if (other._isRedirectable != null) {
        this.isRedirectable = other._isRedirectable!;
      }
      if (other._makeup != null) {
        this.makeup = other._makeup!;
      }
      if (other._navigationControlsWidget != null) {
        this.navigationControlsWidget = other._navigationControlsWidget!;
      }
      if (other._path != null) {
        this.path = other._path!;
      }
      if (other._previousConfiguration != null) {
        this.previousConfiguration = other._previousConfiguration!;
      }
      if (other._title != null) {
        this.title = other._title!;
      }
    }
  }

  //
  //
  //

  // arguments.
  Map<dynamic, dynamic>? get arguments => this._arguments;
  set arguments(Map<dynamic, dynamic>? v) => this._arguments = v;
  dynamic get $arguments => this
      ._arguments
      ?.map(
        (p0, p1) => MapEntry(
          p0,
          p1,
        ),
      )
      .nonNulls
      .nullIfEmpty;
  set $arguments(v) => this._arguments = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0,
          p1,
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // isAccessibleOnlyIfLoggedIn.
  bool? get isAccessibleOnlyIfLoggedIn => this._isAccessibleOnlyIfLoggedIn;
  set isAccessibleOnlyIfLoggedIn(bool? v) =>
      this._isAccessibleOnlyIfLoggedIn = v;
  dynamic get $isAccessibleOnlyIfLoggedIn => this._isAccessibleOnlyIfLoggedIn;
  set $isAccessibleOnlyIfLoggedIn(v) =>
      this._isAccessibleOnlyIfLoggedIn = letBool(v);

  // isAccessibleOnlyIfLoggedInAndVerified.
  bool? get isAccessibleOnlyIfLoggedInAndVerified =>
      this._isAccessibleOnlyIfLoggedInAndVerified;
  set isAccessibleOnlyIfLoggedInAndVerified(bool? v) =>
      this._isAccessibleOnlyIfLoggedInAndVerified = v;
  dynamic get $isAccessibleOnlyIfLoggedInAndVerified =>
      this._isAccessibleOnlyIfLoggedInAndVerified;
  set $isAccessibleOnlyIfLoggedInAndVerified(v) =>
      this._isAccessibleOnlyIfLoggedInAndVerified = letBool(v);

  // isAccessibleOnlyIfLoggedOut.
  bool? get isAccessibleOnlyIfLoggedOut => this._isAccessibleOnlyIfLoggedOut;
  set isAccessibleOnlyIfLoggedOut(bool? v) =>
      this._isAccessibleOnlyIfLoggedOut = v;
  dynamic get $isAccessibleOnlyIfLoggedOut => this._isAccessibleOnlyIfLoggedOut;
  set $isAccessibleOnlyIfLoggedOut(v) =>
      this._isAccessibleOnlyIfLoggedOut = letBool(v);

  // isRedirectable.
  bool? get isRedirectable => this._isRedirectable;
  set isRedirectable(bool? v) => this._isRedirectable = v;
  dynamic get $isRedirectable => this._isRedirectable;
  set $isRedirectable(v) => this._isRedirectable = letBool(v);

  // makeup.
  dynamic get makeup => this._makeup;
  set makeup(dynamic v) => this._makeup = v;
  dynamic get $makeup => this._makeup;
  set $makeup(v) => this._makeup = v;

  // navigationControlsWidget.
  Widget? get navigationControlsWidget => this._navigationControlsWidget;
  set navigationControlsWidget(Widget? v) => this._navigationControlsWidget = v;
  dynamic get $navigationControlsWidget => this._navigationControlsWidget;
  set $navigationControlsWidget(v) => this._navigationControlsWidget = v;

  // path.
  String? get path => this._path;
  set path(String? v) => this._path = v;
  dynamic get $path => this._path?.toString().trim().nullIfEmpty;
  set $path(v) => this._path = v?.toString().trim().nullIfEmpty;

  // previousConfiguration.
  ModelScreenConfiguration? get previousConfiguration =>
      this._previousConfiguration;
  set previousConfiguration(ModelScreenConfiguration? v) =>
      this._previousConfiguration = v;
  dynamic get $previousConfiguration => this._previousConfiguration?.toJson();
  set $previousConfiguration(v) => this._previousConfiguration = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelScreenConfiguration.fromJson(a) : null;
      }();

  // title.
  String? get title => this._title;
  set title(String? v) => this._title = v;
  dynamic get $title => this._title?.toString().trim().nullIfEmpty;
  set $title(v) => this._title = v?.toString().trim().nullIfEmpty;
}
