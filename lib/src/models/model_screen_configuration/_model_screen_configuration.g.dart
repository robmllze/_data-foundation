//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_screen_configuration.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelScreenConfiguration extends _ModelScreenConfiguration {
  //
  //
  //

  static const CLASS = 'ModelScreenConfiguration';
  static const MODEL_ID = 'model_screen_configuration';

  static const K_ARGUMENTS = 'arguments';
  static const K_ID = 'id';
  static const K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN =
      'is_accessible_only_if_logged_in';
  static const K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN_AND_VERIFIED =
      'is_accessible_only_if_logged_in_and_verified';
  static const K_IS_ACCESSIBLE_ONLY_IF_LOGGED_OUT =
      'is_accessible_only_if_logged_out';
  static const K_IS_REDIRECTABLE = 'is_redirectable';
  static const K_MAKEUP = 'makeup';
  static const K_NAVIGATION_CONTROLS_WIDGET = 'navigation_controls_widget';
  static const K_PATH = 'path';
  static const K_PREVIOUS_CONFIGURATION = 'previous_configuration';
  static const K_TITLE = 'title';

  Map<dynamic, dynamic>? arguments;
  bool? isAccessibleOnlyIfLoggedIn;
  bool? isAccessibleOnlyIfLoggedInAndVerified;
  bool? isAccessibleOnlyIfLoggedOut;
  bool? isRedirectable;
  dynamic makeup;
  Widget? navigationControlsWidget;
  String? path;
  ModelScreenConfiguration? previousConfiguration;
  String? title;

  //
  //
  //

  ModelScreenConfiguration({
    String? id,
    this.arguments,
    this.isAccessibleOnlyIfLoggedIn,
    this.isAccessibleOnlyIfLoggedInAndVerified,
    this.isAccessibleOnlyIfLoggedOut,
    this.isRedirectable,
    this.makeup,
    this.navigationControlsWidget,
    this.path,
    this.previousConfiguration,
    this.title,
  }) {
    this.id = id;
  }

  //
  //
  //

  ModelScreenConfiguration.unsafe({
    String? id,
    this.arguments,
    this.isAccessibleOnlyIfLoggedIn,
    this.isAccessibleOnlyIfLoggedInAndVerified,
    this.isAccessibleOnlyIfLoggedOut,
    this.isRedirectable,
    this.makeup,
    this.navigationControlsWidget,
    this.path,
    this.previousConfiguration,
    this.title,
  }) {
    this.id = id;
  }

  //
  //
  //

  factory ModelScreenConfiguration.from(
    Model? other,
  ) {
    return ModelScreenConfiguration.fromJson(
      other is GenericModel ? other.data : other?.toJson(),
    );
  }

  //
  //
  //

  factory ModelScreenConfiguration.of(
    ModelScreenConfiguration? other,
  ) {
    return ModelScreenConfiguration.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelScreenConfiguration.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelScreenConfiguration.fromJson(decoded);
      } else {
        return ModelScreenConfiguration.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelScreenConfiguration.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelScreenConfiguration.unsafe(
        arguments: letMap(otherData?[K_ARGUMENTS])
            ?.map(
              (p0, p1) => MapEntry(
                p0,
                p1,
              ),
            )
            .nonNulls
            .nullIfEmpty
            ?.cast(),
        id: otherData?[K_ID]?.toString().trim().nullIfEmpty,
        isAccessibleOnlyIfLoggedIn:
            letBool(otherData?[K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN]),
        isAccessibleOnlyIfLoggedInAndVerified:
            letBool(otherData?[K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN_AND_VERIFIED]),
        isAccessibleOnlyIfLoggedOut:
            letBool(otherData?[K_IS_ACCESSIBLE_ONLY_IF_LOGGED_OUT]),
        isRedirectable: letBool(otherData?[K_IS_REDIRECTABLE]),
        makeup: otherData?[K_MAKEUP],
        navigationControlsWidget: otherData?[K_NAVIGATION_CONTROLS_WIDGET],
        path: otherData?[K_PATH]?.toString().trim().nullIfEmpty,
        previousConfiguration: () {
          final a =
              letMap<String, dynamic>(otherData?[K_PREVIOUS_CONFIGURATION]);
          return a != null ? ModelScreenConfiguration.fromJson(a) : null;
        }(),
        title: otherData?[K_TITLE]?.toString().trim().nullIfEmpty,
      );
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelScreenConfiguration.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == MODEL_ID) {
        return ModelScreenConfiguration.fromJson(uri.queryParameters);
      } else {
        return ModelScreenConfiguration.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  static ModelScreenConfiguration? convert(
    Model? other,
  ) {
    return other != null ? ModelScreenConfiguration.from(other) : null;
  }

  //
  //
  //

  static ModelScreenConfiguration? fromPool({
    required Iterable<ModelScreenConfiguration>? pool,
    required String? id,
  }) {
    return id != null ? pool?.firstWhereOrNull((e) => e.id == id) : null;
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_ARGUMENTS: arguments
            ?.map(
              (p0, p1) => MapEntry(
                p0,
                p1,
              ),
            )
            .nonNulls
            .nullIfEmpty,
        K_ID: id?.toString().trim().nullIfEmpty,
        K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN: isAccessibleOnlyIfLoggedIn,
        K_IS_ACCESSIBLE_ONLY_IF_LOGGED_IN_AND_VERIFIED:
            isAccessibleOnlyIfLoggedInAndVerified,
        K_IS_ACCESSIBLE_ONLY_IF_LOGGED_OUT: isAccessibleOnlyIfLoggedOut,
        K_IS_REDIRECTABLE: isRedirectable,
        K_MAKEUP: makeup,
        K_NAVIGATION_CONTROLS_WIDGET: navigationControlsWidget,
        K_PATH: path?.toString().trim().nullIfEmpty,
        K_PREVIOUS_CONFIGURATION: previousConfiguration?.toJson(),
        K_TITLE: title?.toString().trim().nullIfEmpty,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelScreenConfiguration.unsafe() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelScreenConfiguration.unsafe()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelScreenConfiguration.fromJson(otherData);
      other.arguments != null ? this.arguments = other.arguments : null;
      other.id != null ? this.id = other.id : null;
      other.isAccessibleOnlyIfLoggedIn != null
          ? this.isAccessibleOnlyIfLoggedIn = other.isAccessibleOnlyIfLoggedIn
          : null;
      other.isAccessibleOnlyIfLoggedInAndVerified != null
          ? this.isAccessibleOnlyIfLoggedInAndVerified =
              other.isAccessibleOnlyIfLoggedInAndVerified
          : null;
      other.isAccessibleOnlyIfLoggedOut != null
          ? this.isAccessibleOnlyIfLoggedOut = other.isAccessibleOnlyIfLoggedOut
          : null;
      other.isRedirectable != null
          ? this.isRedirectable = other.isRedirectable
          : null;
      other.makeup != null ? this.makeup = other.makeup : null;
      other.navigationControlsWidget != null
          ? this.navigationControlsWidget = other.navigationControlsWidget
          : null;
      other.path != null ? this.path = other.path : null;
      other.previousConfiguration != null
          ? this.previousConfiguration = other.previousConfiguration
          : null;
      other.title != null ? this.title = other.title : null;
    }
  }

  //
  //
  //

  String get modelId => MODEL_ID;
}
