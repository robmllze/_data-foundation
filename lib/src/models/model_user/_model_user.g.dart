//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_user.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelUser extends _ModelUser {
  //
  //
  //

  static const K_CREATED_AT = 'created_at';
  static const K_CREATED_BY = 'created_by';
  static const K_DELETED_AT = 'deleted_at';
  static const K_DELETED_BY = 'deleted_by';
  static const K_DID_SEND_WELCOME_EMAIL = 'did_send_welcome_email';
  static const K_EMAIL_SUBSCRIPTIONS = 'email_subscriptions';
  static const K_ID = 'id';
  static const K_PID = 'pid';
  static const K_PUSH_SUBSCRIPTIONS = 'push_subscriptions';
  static const K_SEED = 'seed';
  static const K_SMS_SUBSCRIPTIONS = 'sms_subscriptions';
  static const K_UPLOADED_MEDIA_IDS = 'uploaded_media_ids';

  static const CLASS = 'ModelUser';

  @override
  String get $class => CLASS;

  DateTime? _createdAt;
  String? _createdBy;
  DateTime? _deletedAt;
  String? _deletedBy;
  bool? _didSendWelcomeEmail;
  Set<String>? _emailSubscriptions;
  String? _id;
  String? _pid;
  Set<String>? _pushSubscriptions;
  String? _seed;
  Set<String>? _smsSubscriptions;
  Set<String>? _uploadedMediaIds;

  //
  //
  //

  ModelUser.empty();

  //
  //
  //

  factory ModelUser({
    required DateTime createdAt,
    String? createdBy,
    DateTime? deletedAt,
    String? deletedBy,
    bool? didSendWelcomeEmail,
    Set<String>? emailSubscriptions,
    String? id,
    String? pid,
    Set<String>? pushSubscriptions,
    String? seed,
    Set<String>? smsSubscriptions,
    Set<String>? uploadedMediaIds,
  }) {
    return ModelUser.b(
      createdAt: createdAt,
      createdBy: createdBy,
      deletedAt: deletedAt,
      deletedBy: deletedBy,
      didSendWelcomeEmail: didSendWelcomeEmail,
      emailSubscriptions: emailSubscriptions,
      id: id,
      pid: pid,
      pushSubscriptions: pushSubscriptions,
      seed: seed,
      smsSubscriptions: smsSubscriptions,
      uploadedMediaIds: uploadedMediaIds,
    );
  }

  //
  //
  //

  ModelUser.b({
    DateTime? createdAt,
    String? createdBy,
    DateTime? deletedAt,
    String? deletedBy,
    bool? didSendWelcomeEmail,
    Set<String>? emailSubscriptions,
    String? id,
    String? pid,
    Set<String>? pushSubscriptions,
    String? seed,
    Set<String>? smsSubscriptions,
    Set<String>? uploadedMediaIds,
  }) {
    assert(createdAt != null);
    this._createdAt = createdAt;
    this._createdBy = createdBy;
    this._deletedAt = deletedAt;
    this._deletedBy = deletedBy;
    this._didSendWelcomeEmail = didSendWelcomeEmail;
    this._emailSubscriptions = emailSubscriptions;
    this._id = id;
    this._pid = pid;
    this._pushSubscriptions = pushSubscriptions;
    this._seed = seed;
    this._smsSubscriptions = smsSubscriptions;
    this._uploadedMediaIds = uploadedMediaIds;
  }

  //
  //
  //

  factory ModelUser.from(
    Model? other,
  ) {
    return ModelUser.fromJson(
      letAs<GenericModel>(other)?.data ?? other?.toJson(),
    );
  }

  //
  //
  //

  static ModelUser? fromOrNull(
    Model? other,
  ) {
    return other != null ? ModelUser.from(other) : null;
  }

  //
  //
  //

  factory ModelUser.of(
    ModelUser? other,
  ) {
    return ModelUser.fromJson(other?.toJson());
  }

  //
  //
  //

  factory ModelUser.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelUser.fromJson(decoded);
      } else {
        return ModelUser.empty();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelUser.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelUser.empty()
        ..$createdAt = otherData?[K_CREATED_AT]
        ..$createdBy = otherData?[K_CREATED_BY]
        ..$deletedAt = otherData?[K_DELETED_AT]
        ..$deletedBy = otherData?[K_DELETED_BY]
        ..$didSendWelcomeEmail = otherData?[K_DID_SEND_WELCOME_EMAIL]
        ..$emailSubscriptions = otherData?[K_EMAIL_SUBSCRIPTIONS]
        ..$id = otherData?[K_ID]
        ..$pid = otherData?[K_PID]
        ..$pushSubscriptions = otherData?[K_PUSH_SUBSCRIPTIONS]
        ..$seed = otherData?[K_SEED]
        ..$smsSubscriptions = otherData?[K_SMS_SUBSCRIPTIONS]
        ..$uploadedMediaIds = otherData?[K_UPLOADED_MEDIA_IDS];
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelUser.fromUri(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelUser.fromJson(uri.queryParameters);
      } else {
        return ModelUser.b();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_CREATED_AT: this.$createdAt,
        K_CREATED_BY: this.$createdBy,
        K_DELETED_AT: this.$deletedAt,
        K_DELETED_BY: this.$deletedBy,
        K_DID_SEND_WELCOME_EMAIL: this.$didSendWelcomeEmail,
        K_EMAIL_SUBSCRIPTIONS: this.$emailSubscriptions,
        K_ID: this.$id,
        K_PID: this.$pid,
        K_PUSH_SUBSCRIPTIONS: this.$pushSubscriptions,
        K_SEED: this.$seed,
        K_SMS_SUBSCRIPTIONS: this.$smsSubscriptions,
        K_UPLOADED_MEDIA_IDS: this.$uploadedMediaIds,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelUser.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelUser.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelUser.fromJson(otherData);
      if (other._createdAt != null) {
        this.createdAt = other._createdAt!;
      }
      if (other._createdBy != null) {
        this.createdBy = other._createdBy!;
      }
      if (other._deletedAt != null) {
        this.deletedAt = other._deletedAt!;
      }
      if (other._deletedBy != null) {
        this.deletedBy = other._deletedBy!;
      }
      if (other._didSendWelcomeEmail != null) {
        this.didSendWelcomeEmail = other._didSendWelcomeEmail!;
      }
      if (other._emailSubscriptions != null) {
        this.emailSubscriptions = other._emailSubscriptions!;
      }
      if (other._id != null) {
        this.id = other._id!;
      }
      if (other._pid != null) {
        this.pid = other._pid!;
      }
      if (other._pushSubscriptions != null) {
        this.pushSubscriptions = other._pushSubscriptions!;
      }
      if (other._seed != null) {
        this.seed = other._seed!;
      }
      if (other._smsSubscriptions != null) {
        this.smsSubscriptions = other._smsSubscriptions!;
      }
      if (other._uploadedMediaIds != null) {
        this.uploadedMediaIds = other._uploadedMediaIds!;
      }
    }
  }

  //
  //
  //

  // createdAt.
  DateTime get createdAt => this._createdAt!;
  set createdAt(DateTime v) => this._createdAt = v;
  dynamic get $createdAt => (this._createdAt?.toUtc()?.toIso8601String())!;
  set $createdAt(v) => this._createdAt = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  // createdBy.
  String? get createdBy => this._createdBy;
  set createdBy(String? v) => this._createdBy = v;
  dynamic get $createdBy => this._createdBy?.toString().trim().nullIfEmpty;
  set $createdBy(v) => this._createdBy = v?.toString().trim().nullIfEmpty;

  // deletedAt.
  DateTime? get deletedAt => this._deletedAt;
  set deletedAt(DateTime? v) => this._deletedAt = v;
  dynamic get $deletedAt => this._deletedAt?.toUtc()?.toIso8601String();
  set $deletedAt(v) => this._deletedAt = () {
        final a = v;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();

  // deletedBy.
  String? get deletedBy => this._deletedBy;
  set deletedBy(String? v) => this._deletedBy = v;
  dynamic get $deletedBy => this._deletedBy?.toString().trim().nullIfEmpty;
  set $deletedBy(v) => this._deletedBy = v?.toString().trim().nullIfEmpty;

  // didSendWelcomeEmail.
  bool? get didSendWelcomeEmail => this._didSendWelcomeEmail;
  set didSendWelcomeEmail(bool? v) => this._didSendWelcomeEmail = v;
  dynamic get $didSendWelcomeEmail => this._didSendWelcomeEmail;
  set $didSendWelcomeEmail(v) => this._didSendWelcomeEmail = letBool(v);

  // emailSubscriptions.
  Set<String>? get emailSubscriptions => this._emailSubscriptions;
  set emailSubscriptions(Set<String>? v) => this._emailSubscriptions = v;
  dynamic get $emailSubscriptions => this
      ._emailSubscriptions
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  set $emailSubscriptions(v) => this._emailSubscriptions = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // id.
  String? get id => this._id;
  set id(String? v) => this._id = v;
  dynamic get $id => this._id?.toString().trim().nullIfEmpty;
  set $id(v) => this._id = v?.toString().trim().nullIfEmpty;

  // pid.
  String? get pid => this._pid;
  set pid(String? v) => this._pid = v;
  dynamic get $pid => this._pid?.toString().trim().nullIfEmpty;
  set $pid(v) => this._pid = v?.toString().trim().nullIfEmpty;

  // pushSubscriptions.
  Set<String>? get pushSubscriptions => this._pushSubscriptions;
  set pushSubscriptions(Set<String>? v) => this._pushSubscriptions = v;
  dynamic get $pushSubscriptions => this
      ._pushSubscriptions
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  set $pushSubscriptions(v) => this._pushSubscriptions = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // seed.
  String? get seed => this._seed;
  set seed(String? v) => this._seed = v;
  dynamic get $seed => this._seed?.toString().trim().nullIfEmpty;
  set $seed(v) => this._seed = v?.toString().trim().nullIfEmpty;

  // smsSubscriptions.
  Set<String>? get smsSubscriptions => this._smsSubscriptions;
  set smsSubscriptions(Set<String>? v) => this._smsSubscriptions = v;
  dynamic get $smsSubscriptions => this
      ._smsSubscriptions
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  set $smsSubscriptions(v) => this._smsSubscriptions = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // uploadedMediaIds.
  Set<String>? get uploadedMediaIds => this._uploadedMediaIds;
  set uploadedMediaIds(Set<String>? v) => this._uploadedMediaIds = v;
  dynamic get $uploadedMediaIds => this
      ._uploadedMediaIds
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  set $uploadedMediaIds(v) => this._uploadedMediaIds = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();
}
