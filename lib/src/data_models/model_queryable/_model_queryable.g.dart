//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_queryable.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelQueryable extends _ModelQueryable {
  //
  //
  //

  static const CLASS_NAME = 'ModelQueryable';

  @override
  String get $className => CLASS_NAME;

  final String? value;
  final String? queryableValue;

  //
  //
  //

  const ModelQueryable({
    required this.value,
    required this.queryableValue,
  });

  const ModelQueryable.c2({
    this.value,
    this.queryableValue,
  });

  factory ModelQueryable.c3({
    String? value,
    String? queryableValue,
  }) {
    assert(value != null);
    assert(queryableValue != null);
    return ModelQueryable(
      value: value,
      queryableValue: queryableValue,
    );
  }

  factory ModelQueryable.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelQueryable.from: $e');
      rethrow;
    }
  }

  static ModelQueryable? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelQueryable.of(
    ModelQueryable other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelQueryable.of: $e');
      rethrow;
    }
  }

  static ModelQueryable? ofOrNull(
    ModelQueryable? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelQueryable.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelQueryable.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelQueryable? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelQueryable.fromJson(decoded);
      } else {
        return const ModelQueryable.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelQueryable.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelQueryable.fromJson: $e');
      rethrow;
    }
  }

  static ModelQueryable? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final value0 = otherData?[ModelQueryableFieldNames.value];
      final value = value0?.toString().trim().nullIfEmpty;
      final queryableValue0 =
          otherData?[ModelQueryableFieldNames.queryableValue];
      final queryableValue = queryableValue0
          ?.toString()
          .trim()
          .nullIfEmpty
          ?.toLowerCase()
          .replaceAll(r'[^\w]', '');
      return ModelQueryable(
        value: value,
        queryableValue: queryableValue,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelQueryable.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelQueryable.fromUri: $e');
      rethrow;
    }
  }

  static ModelQueryable? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelQueryable.fromJson(uri.queryParameters);
      } else {
        return const ModelQueryable.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final value0 = this.value?.trim().nullIfEmpty;
      final queryableValue0 = this
          .queryableValue
          ?.trim()
          .nullIfEmpty
          ?.toLowerCase()
          .replaceAll(r'[^\w]', '');
      final withNulls = <String, dynamic>{
        ModelQueryableFieldNames.value: value0,
        ModelQueryableFieldNames.queryableValue: queryableValue0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelQueryable.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelQueryable copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelQueryable.fromJson(c);
  }

  //
  //
  //

  // value.
  String get valueField => this.value!;

  // queryableValue.
  String get queryableValueField => this.queryableValue!;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class ModelQueryableFieldNames {
  //
  //
  //

  static const value = 'value';
  static const queryableValue = 'queryableValue';

  //
  //
  //

  const ModelQueryableFieldNames._();
}
