//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'google_places.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class GooglePlacesDataModel extends _GooglePlacesDataModel {
  //
  //
  //

  static const CLASS_NAME = 'GooglePlacesDataModel';

  @override
  String get $className => CLASS_NAME;

  final List<GooglePlacesPredictionModel>? predictions;
  final String? status;

  //
  //
  //

  const GooglePlacesDataModel({
    required this.predictions,
    required this.status,
  });

  const GooglePlacesDataModel.c2({
    this.predictions,
    this.status,
  });

  factory GooglePlacesDataModel.c3({
    List<GooglePlacesPredictionModel>? predictions,
    String? status,
  }) {
    assert(predictions != null);
    assert(status != null);
    return GooglePlacesDataModel(
      predictions: predictions,
      status: status,
    );
  }

  factory GooglePlacesDataModel.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlacesDataModel.from: $e');
      rethrow;
    }
  }

  static GooglePlacesDataModel? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory GooglePlacesDataModel.of(
    GooglePlacesDataModel other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlacesDataModel.of: $e');
      rethrow;
    }
  }

  static GooglePlacesDataModel? ofOrNull(
    GooglePlacesDataModel? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory GooglePlacesDataModel.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'GooglePlacesDataModel.fromJsonString: $e');
      rethrow;
    }
  }

  static GooglePlacesDataModel? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return GooglePlacesDataModel.fromJson(decoded);
      } else {
        return const GooglePlacesDataModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory GooglePlacesDataModel.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'GooglePlacesDataModel.fromJson: $e');
      rethrow;
    }
  }

  static GooglePlacesDataModel? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final predictions0 = otherData?['predictions'];
      final predictions = letList(predictions0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? GooglePlacesPredictionModel.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final status0 = otherData?['status'];
      final status = status0?.toString().trim().nullIfEmpty;
      return GooglePlacesDataModel(
        predictions: predictions,
        status: status,
      );
    } catch (e) {
      return null;
    }
  }

  factory GooglePlacesDataModel.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'GooglePlacesDataModel.fromUri: $e');
      rethrow;
    }
  }

  static GooglePlacesDataModel? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return GooglePlacesDataModel.fromJson(uri.queryParameters);
      } else {
        return const GooglePlacesDataModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final predictions0 = this
          .predictions
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final status0 = this.status?.trim().nullIfEmpty;
      final withNulls = mergeMapsDeep([
        {
          'predictions': predictions0,
        },
        {
          'status': status0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'GooglePlacesDataModel.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  GooglePlacesDataModel copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return GooglePlacesDataModel.fromJson(c);
  }

  //
  //
  //

  // predictions.
  List<GooglePlacesPredictionModel> get predictionsField => this.predictions!;

  // status.
  String get statusField => this.status!;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class GooglePlacesDataModelFieldNames {
  //
  //
  //

  static const predictions = 'predictions';
  static const status = 'status';

  //
  //
  //

  const GooglePlacesDataModelFieldNames._();
}
