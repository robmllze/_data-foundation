//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'google_places.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class GooglePlacesPredictionModel extends _GooglePlacesPredictionModel {
  //
  //
  //

  static const CLASS_NAME = 'GooglePlacesPredictionModel';

  @override
  String get $className => CLASS_NAME;

  final String? description;
  final List<GooglePlacesMatchedSubstringModel>? matchedSubstrings;
  final String? placeId;
  final String? reference;
  final GooglePlacesStructuredFormattingModel? structuredFormatting;
  final List<GooglePlacesTermModel>? terms;
  final List<String>? types;

  //
  //
  //

  const GooglePlacesPredictionModel({
    required this.description,
    required this.matchedSubstrings,
    required this.placeId,
    required this.reference,
    required this.structuredFormatting,
    required this.terms,
    required this.types,
  });

  const GooglePlacesPredictionModel.c2({
    this.description,
    this.matchedSubstrings,
    this.placeId,
    this.reference,
    this.structuredFormatting,
    this.terms,
    this.types,
  });

  factory GooglePlacesPredictionModel.c3({
    String? description,
    List<GooglePlacesMatchedSubstringModel>? matchedSubstrings,
    String? placeId,
    String? reference,
    GooglePlacesStructuredFormattingModel? structuredFormatting,
    List<GooglePlacesTermModel>? terms,
    List<String>? types,
  }) {
    assert(description != null);
    assert(matchedSubstrings != null);
    assert(placeId != null);
    assert(reference != null);
    assert(structuredFormatting != null);
    assert(terms != null);
    assert(types != null);
    return GooglePlacesPredictionModel(
      description: description,
      matchedSubstrings: matchedSubstrings,
      placeId: placeId,
      reference: reference,
      structuredFormatting: structuredFormatting,
      terms: terms,
      types: types,
    );
  }

  factory GooglePlacesPredictionModel.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlacesPredictionModel.from: $e');
      rethrow;
    }
  }

  static GooglePlacesPredictionModel? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory GooglePlacesPredictionModel.of(
    GooglePlacesPredictionModel other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlacesPredictionModel.of: $e');
      rethrow;
    }
  }

  static GooglePlacesPredictionModel? ofOrNull(
    GooglePlacesPredictionModel? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory GooglePlacesPredictionModel.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'GooglePlacesPredictionModel.fromJsonString: $e');
      rethrow;
    }
  }

  static GooglePlacesPredictionModel? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return GooglePlacesPredictionModel.fromJson(decoded);
      } else {
        return const GooglePlacesPredictionModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory GooglePlacesPredictionModel.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'GooglePlacesPredictionModel.fromJson: $e');
      rethrow;
    }
  }

  static GooglePlacesPredictionModel? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final description0 = otherData?['description'];
      final description = description0?.toString().trim().nullIfEmpty;
      final matchedSubstrings0 = otherData?['matched_substrings'];
      final matchedSubstrings = letList(matchedSubstrings0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null
                  ? GooglePlacesMatchedSubstringModel.fromJson(a)
                  : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final placeId0 = otherData?['place_id'];
      final placeId = placeId0?.toString().trim().nullIfEmpty;
      final reference0 = otherData?['reference'];
      final reference = reference0?.toString().trim().nullIfEmpty;
      final structuredFormatting0 = otherData?['structured_formatting'];
      final structuredFormatting = () {
        final a = letMap<String, dynamic>(structuredFormatting0);
        return a != null
            ? GooglePlacesStructuredFormattingModel.fromJson(a)
            : null;
      }();
      final terms0 = otherData?['terms'];
      final terms = letList(terms0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? GooglePlacesTermModel.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final types0 = otherData?['types'];
      final types = letList(types0)
          ?.map(
            (p0) => p0?.toString().trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      return GooglePlacesPredictionModel(
        description: description,
        matchedSubstrings: matchedSubstrings,
        placeId: placeId,
        reference: reference,
        structuredFormatting: structuredFormatting,
        terms: terms,
        types: types,
      );
    } catch (e) {
      return null;
    }
  }

  factory GooglePlacesPredictionModel.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'GooglePlacesPredictionModel.fromUri: $e');
      rethrow;
    }
  }

  static GooglePlacesPredictionModel? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return GooglePlacesPredictionModel.fromJson(uri.queryParameters);
      } else {
        return const GooglePlacesPredictionModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final description0 = this.description?.trim().nullIfEmpty;
      final matchedSubstrings0 = this
          .matchedSubstrings
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final placeId0 = this.placeId?.trim().nullIfEmpty;
      final reference0 = this.reference?.trim().nullIfEmpty;
      final structuredFormatting0 = this.structuredFormatting?.toJson();
      final terms0 = this
          .terms
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final types0 = this
          .types
          ?.map(
            (p0) => p0?.trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final withNulls = mergeMapsDeep([
        {
          'description': description0,
        },
        {
          'matched_substrings': matchedSubstrings0,
        },
        {
          'place_id': placeId0,
        },
        {
          'reference': reference0,
        },
        {
          'structured_formatting': structuredFormatting0,
        },
        {
          'terms': terms0,
        },
        {
          'types': types0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'GooglePlacesPredictionModel.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  GooglePlacesPredictionModel copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return GooglePlacesPredictionModel.fromJson(c);
  }

  //
  //
  //

  // description.
  String get descriptionField => this.description!;

  // matchedSubstrings.
  List<GooglePlacesMatchedSubstringModel> get matchedSubstringsField =>
      this.matchedSubstrings!;

  // placeId.
  String get placeIdField => this.placeId!;

  // reference.
  String get referenceField => this.reference!;

  // structuredFormatting.
  GooglePlacesStructuredFormattingModel get structuredFormattingField =>
      this.structuredFormatting!;

  // terms.
  List<GooglePlacesTermModel> get termsField => this.terms!;

  // types.
  List<String> get typesField => this.types!;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class GooglePlacesPredictionModelFieldNames {
  //
  //
  //

  static const description = 'description';
  static const matchedSubstrings = 'matched_substrings';
  static const placeId = 'place_id';
  static const reference = 'reference';
  static const structuredFormatting = 'structured_formatting';
  static const terms = 'terms';
  static const types = 'types';

  //
  //
  //

  const GooglePlacesPredictionModelFieldNames._();
}
