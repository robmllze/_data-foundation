//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'google_places.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class GooglePlacesTermModel extends _GooglePlacesTermModel {
  //
  //
  //

  static const CLASS_NAME = 'GooglePlacesTermModel';

  @override
  String get $className => CLASS_NAME;

  final int? offset;
  final String? value;

  //
  //
  //

  const GooglePlacesTermModel({
    required this.offset,
    required this.value,
  });

  const GooglePlacesTermModel.c2({
    this.offset,
    this.value,
  });

  factory GooglePlacesTermModel.c3({
    int? offset,
    String? value,
  }) {
    assert(offset != null);
    assert(value != null);
    return GooglePlacesTermModel(
      offset: offset,
      value: value,
    );
  }

  factory GooglePlacesTermModel.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlacesTermModel.from: $e');
      rethrow;
    }
  }

  static GooglePlacesTermModel? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory GooglePlacesTermModel.of(
    GooglePlacesTermModel other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlacesTermModel.of: $e');
      rethrow;
    }
  }

  static GooglePlacesTermModel? ofOrNull(
    GooglePlacesTermModel? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory GooglePlacesTermModel.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'GooglePlacesTermModel.fromJsonString: $e');
      rethrow;
    }
  }

  static GooglePlacesTermModel? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return GooglePlacesTermModel.fromJson(decoded);
      } else {
        return const GooglePlacesTermModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory GooglePlacesTermModel.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'GooglePlacesTermModel.fromJson: $e');
      rethrow;
    }
  }

  static GooglePlacesTermModel? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final offset0 = otherData?['offset'];
      final offset = letInt(offset0);
      final value0 = otherData?['value'];
      final value = value0?.toString().trim().nullIfEmpty;
      return GooglePlacesTermModel(
        offset: offset,
        value: value,
      );
    } catch (e) {
      return null;
    }
  }

  factory GooglePlacesTermModel.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'GooglePlacesTermModel.fromUri: $e');
      rethrow;
    }
  }

  static GooglePlacesTermModel? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return GooglePlacesTermModel.fromJson(uri.queryParameters);
      } else {
        return const GooglePlacesTermModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final offset0 = this.offset;
      final value0 = this.value?.trim().nullIfEmpty;
      final withNulls = mergeMapsDeep([
        {
          'offset': offset0,
        },
        {
          'value': value0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'GooglePlacesTermModel.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  GooglePlacesTermModel copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return GooglePlacesTermModel.fromJson(c);
  }

  //
  //
  //

  // offset.
  int get offsetField => this.offset!;

  // value.
  String get valueField => this.value!;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class GooglePlacesTermModelFieldNames {
  //
  //
  //

  static const offset = 'offset';
  static const value = 'value';

  //
  //
  //

  const GooglePlacesTermModelFieldNames._();
}
