//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_job_pub.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelJobPub extends _ModelJobPub {
  //
  //
  //

  static const K_REF = 'ref';
  static const K_ID = 'id';
  static const K_DISPLAY_NAME = 'displayName';
  static const K_DISPLAY_NAME_SEARCHABLE = 'displayNameSearchable';
  static const K_DISPLAY_COLOR = 'displayColor';
  static const K_EMAIL = 'email';
  static const K_CREATED_REG = 'createdReg';
  static const K_DELETED_REG = 'deletedReg';
  static const K_DESCRIPTION = 'description';
  static const K_ADDRESS_ENTRIES = 'addressEntries';
  static const K_EMAIL_ENTRIES = 'emailEntries';
  static const K_FILE_ENTRIES = 'fileEntries';
  static const K_PHONE_ENTRIES = 'phoneEntries';
  static const K_DEVICE_REGS = 'deviceRegs';
  static const K_REGISTRATION = 'registration';
  static const K_CLOCK_IN_REGS = 'clockInRegs';
  static const K_CLOCK_OUT_REGS = 'clockOutRegs';
  static const K_OPENED_REGS = 'openedRegs';
  static const K_CLOSED_REGS = 'closedRegs';
  static const K_TODO_BOOK = 'todoBook';
  static const K_STATUS = 'status';

  static const CLASS = 'ModelJobPub';

  @override
  String get $class => CLASS;

  DataRefModel? ref;
  String? id;
  String? displayName;
  String? displayNameSearchable;
  Color? displayColor;
  String? email;
  ModelRegistration? createdReg;
  ModelRegistration? deletedReg;
  String? description;
  Map<String, ModelAddressEntry>? addressEntries;
  Map<String, ModelEmailEntry>? emailEntries;
  Map<String, ModelFileEntry>? fileEntries;
  Map<String, ModelPhoneEntry>? phoneEntries;
  List<ModelDeviceRegistration>? deviceRegs;
  ModelRegistration? registration;
  List<ModelRegistration>? clockInRegs;
  List<ModelRegistration>? clockOutRegs;
  List<ModelRegistration>? openedRegs;
  List<ModelRegistration>? closedRegs;
  Map<DateTime, ModelTodoEntry>? todoBook;
  JobStatusType? status;

  //
  //
  //

  ModelJobPub.empty();

  //
  //
  //

  factory ModelJobPub({
    required DataRefModel ref,
    String? id,
    String? displayName,
    String? displayNameSearchable,
    Color? displayColor,
    String? email,
    ModelRegistration? createdReg,
    ModelRegistration? deletedReg,
    String? description,
    Map<String, ModelAddressEntry>? addressEntries,
    Map<String, ModelEmailEntry>? emailEntries,
    Map<String, ModelFileEntry>? fileEntries,
    Map<String, ModelPhoneEntry>? phoneEntries,
    List<ModelDeviceRegistration>? deviceRegs,
    ModelRegistration? registration,
    List<ModelRegistration>? clockInRegs,
    List<ModelRegistration>? clockOutRegs,
    List<ModelRegistration>? openedRegs,
    List<ModelRegistration>? closedRegs,
    Map<DateTime, ModelTodoEntry>? todoBook,
    JobStatusType? status,
  }) {
    return ModelJobPub.b(
      ref: ref,
      id: id,
      displayName: displayName,
      displayNameSearchable: displayNameSearchable,
      displayColor: displayColor,
      email: email,
      createdReg: createdReg,
      deletedReg: deletedReg,
      description: description,
      addressEntries: addressEntries,
      emailEntries: emailEntries,
      fileEntries: fileEntries,
      phoneEntries: phoneEntries,
      deviceRegs: deviceRegs,
      registration: registration,
      clockInRegs: clockInRegs,
      clockOutRegs: clockOutRegs,
      openedRegs: openedRegs,
      closedRegs: closedRegs,
      todoBook: todoBook,
      status: status,
    );
  }

  //
  //
  //

  ModelJobPub.b({
    this.ref,
    this.id,
    this.displayName,
    this.displayNameSearchable,
    this.displayColor,
    this.email,
    this.createdReg,
    this.deletedReg,
    this.description,
    this.addressEntries,
    this.emailEntries,
    this.fileEntries,
    this.phoneEntries,
    this.deviceRegs,
    this.registration,
    this.clockInRegs,
    this.clockOutRegs,
    this.openedRegs,
    this.closedRegs,
    this.todoBook,
    this.status,
  }) {
    assert(this.ref != null);
  }

  //
  //
  //

  factory ModelJobPub.from(
    Model? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelJobPub.from: $e');
      rethrow;
    }
  }

  static ModelJobPub? fromOrNull(
    Model? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  //
  //
  //

  factory ModelJobPub.of(
    ModelJobPub other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelJobPub.of: $e');
      rethrow;
    }
  }

  static ModelJobPub? ofOrNull(
    ModelJobPub? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  //
  //
  //

  factory ModelJobPub.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelJobPub.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelJobPub? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelJobPub.fromJson(decoded);
      } else {
        return ModelJobPub.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  factory ModelJobPub.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelJobPub.fromJson: $e');
      rethrow;
    }
  }

  static ModelJobPub? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelJobPub.empty()
        ..$ref = otherData?[K_REF]
        ..$id = otherData?[K_ID]
        ..$displayName = otherData?[K_DISPLAY_NAME]
        ..$displayNameSearchable = otherData?[K_DISPLAY_NAME_SEARCHABLE]
        ..$displayColor = otherData?[K_DISPLAY_COLOR]
        ..$email = otherData?[K_EMAIL]
        ..$createdReg = otherData?[K_CREATED_REG]
        ..$deletedReg = otherData?[K_DELETED_REG]
        ..$description = otherData?[K_DESCRIPTION]
        ..$addressEntries = otherData?[K_ADDRESS_ENTRIES]
        ..$emailEntries = otherData?[K_EMAIL_ENTRIES]
        ..$fileEntries = otherData?[K_FILE_ENTRIES]
        ..$phoneEntries = otherData?[K_PHONE_ENTRIES]
        ..$deviceRegs = otherData?[K_DEVICE_REGS]
        ..$registration = otherData?[K_REGISTRATION]
        ..$clockInRegs = otherData?[K_CLOCK_IN_REGS]
        ..$clockOutRegs = otherData?[K_CLOCK_OUT_REGS]
        ..$openedRegs = otherData?[K_OPENED_REGS]
        ..$closedRegs = otherData?[K_CLOSED_REGS]
        ..$todoBook = otherData?[K_TODO_BOOK]
        ..$status = otherData?[K_STATUS];
    } catch (e) {
      return null;
    }
  }

  //
  //
  //

  factory ModelJobPub.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelJobPub.fromUri: $e');
      rethrow;
    }
  }

  static ModelJobPub? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelJobPub.fromJson(uri.queryParameters);
      } else {
        return ModelJobPub.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_REF: this.$ref,
        K_ID: this.$id,
        K_DISPLAY_NAME: this.$displayName,
        K_DISPLAY_NAME_SEARCHABLE: this.$displayNameSearchable,
        K_DISPLAY_COLOR: this.$displayColor,
        K_EMAIL: this.$email,
        K_CREATED_REG: this.$createdReg,
        K_DELETED_REG: this.$deletedReg,
        K_DESCRIPTION: this.$description,
        K_ADDRESS_ENTRIES: this.$addressEntries,
        K_EMAIL_ENTRIES: this.$emailEntries,
        K_FILE_ENTRIES: this.$fileEntries,
        K_PHONE_ENTRIES: this.$phoneEntries,
        K_DEVICE_REGS: this.$deviceRegs,
        K_REGISTRATION: this.$registration,
        K_CLOCK_IN_REGS: this.$clockInRegs,
        K_CLOCK_OUT_REGS: this.$clockOutRegs,
        K_OPENED_REGS: this.$openedRegs,
        K_CLOSED_REGS: this.$closedRegs,
        K_TODO_BOOK: this.$todoBook,
        K_STATUS: this.$status,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelJobPub.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelJobPub.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelJobPub.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelJobPub.fromJson(otherData);
      if (other.ref != null) {
        this.ref = other.ref!;
      }
      if (other.id != null) {
        this.id = other.id!;
      }
      if (other.displayName != null) {
        this.displayName = other.displayName!;
      }
      if (other.displayNameSearchable != null) {
        this.displayNameSearchable = other.displayNameSearchable!;
      }
      if (other.displayColor != null) {
        this.displayColor = other.displayColor!;
      }
      if (other.email != null) {
        this.email = other.email!;
      }
      if (other.createdReg != null) {
        this.createdReg = other.createdReg!;
      }
      if (other.deletedReg != null) {
        this.deletedReg = other.deletedReg!;
      }
      if (other.description != null) {
        this.description = other.description!;
      }
      if (other.addressEntries != null) {
        this.addressEntries = other.addressEntries!;
      }
      if (other.emailEntries != null) {
        this.emailEntries = other.emailEntries!;
      }
      if (other.fileEntries != null) {
        this.fileEntries = other.fileEntries!;
      }
      if (other.phoneEntries != null) {
        this.phoneEntries = other.phoneEntries!;
      }
      if (other.deviceRegs != null) {
        this.deviceRegs = other.deviceRegs!;
      }
      if (other.registration != null) {
        this.registration = other.registration!;
      }
      if (other.clockInRegs != null) {
        this.clockInRegs = other.clockInRegs!;
      }
      if (other.clockOutRegs != null) {
        this.clockOutRegs = other.clockOutRegs!;
      }
      if (other.openedRegs != null) {
        this.openedRegs = other.openedRegs!;
      }
      if (other.closedRegs != null) {
        this.closedRegs = other.closedRegs!;
      }
      if (other.todoBook != null) {
        this.todoBook = other.todoBook!;
      }
      if (other.status != null) {
        this.status = other.status!;
      }
    }
  }

  //
  //
  //

  // ref.
  DataRefModel get refField => this.ref!;
  set refField(DataRefModel v) => this.ref = v;
  @protected
  dynamic get $ref => this.ref?.toJson();
  @protected
  set $ref(v) => this.ref = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();

  // id.
  String? get idField => this.id;
  set idField(String? v) => this.id = v;
  @protected
  dynamic get $id => this.id?.toString().trim().nullIfEmpty;
  @protected
  set $id(v) => this.id = v?.toString().trim().nullIfEmpty;

  // displayName.
  String? get displayNameField => this.displayName;
  set displayNameField(String? v) => this.displayName = v;
  @protected
  dynamic get $displayName => this.displayName?.toString().trim().nullIfEmpty;
  @protected
  set $displayName(v) => this.displayName = v?.toString().trim().nullIfEmpty;

  // displayNameSearchable.
  String? get displayNameSearchableField => this.displayNameSearchable;
  set displayNameSearchableField(String? v) => this.displayNameSearchable = v;
  @protected
  dynamic get $displayNameSearchable => this
      .displayNameSearchable
      ?.toString()
      .trim()
      .nullIfEmpty
      ?.toLowerCase()
      .replaceAll(r'[^\w]', '');
  @protected
  set $displayNameSearchable(v) => this.displayNameSearchable =
      v?.toString().trim().nullIfEmpty?.toLowerCase().replaceAll(r'[^\w]', '');

  // displayColor.
  Color? get displayColorField => this.displayColor;
  set displayColorField(Color? v) => this.displayColor = v;
  @protected
  dynamic get $displayColor => this.displayColor?.value;
  @protected
  set $displayColor(v) => this.displayColor = () {
        final a = letAs<int>(v);
        return a is int ? Color(a) : null;
      }();

  // email.
  String? get emailField => this.email;
  set emailField(String? v) => this.email = v;
  @protected
  dynamic get $email =>
      this.email?.toString().trim().nullIfEmpty?.toLowerCase();
  @protected
  set $email(v) => this.email = v?.toString().trim().nullIfEmpty?.toLowerCase();

  // createdReg.
  ModelRegistration? get createdRegField => this.createdReg;
  set createdRegField(ModelRegistration? v) => this.createdReg = v;
  @protected
  dynamic get $createdReg => this.createdReg?.toJson();
  @protected
  set $createdReg(v) => this.createdReg = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();

  // deletedReg.
  ModelRegistration? get deletedRegField => this.deletedReg;
  set deletedRegField(ModelRegistration? v) => this.deletedReg = v;
  @protected
  dynamic get $deletedReg => this.deletedReg?.toJson();
  @protected
  set $deletedReg(v) => this.deletedReg = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();

  // description.
  String? get descriptionField => this.description;
  set descriptionField(String? v) => this.description = v;
  @protected
  dynamic get $description => this.description?.toString().trim().nullIfEmpty;
  @protected
  set $description(v) => this.description = v?.toString().trim().nullIfEmpty;

  // addressEntries.
  Map<String, ModelAddressEntry>? get addressEntriesField =>
      this.addressEntries;
  set addressEntriesField(Map<String, ModelAddressEntry>? v) =>
      this.addressEntries = v;
  @protected
  dynamic get $addressEntries => this
      .addressEntries
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $addressEntries(v) => this.addressEntries = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelAddressEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // emailEntries.
  Map<String, ModelEmailEntry>? get emailEntriesField => this.emailEntries;
  set emailEntriesField(Map<String, ModelEmailEntry>? v) =>
      this.emailEntries = v;
  @protected
  dynamic get $emailEntries => this
      .emailEntries
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $emailEntries(v) => this.emailEntries = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelEmailEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // fileEntries.
  Map<String, ModelFileEntry>? get fileEntriesField => this.fileEntries;
  set fileEntriesField(Map<String, ModelFileEntry>? v) => this.fileEntries = v;
  @protected
  dynamic get $fileEntries => this
      .fileEntries
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $fileEntries(v) => this.fileEntries = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelFileEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // phoneEntries.
  Map<String, ModelPhoneEntry>? get phoneEntriesField => this.phoneEntries;
  set phoneEntriesField(Map<String, ModelPhoneEntry>? v) =>
      this.phoneEntries = v;
  @protected
  dynamic get $phoneEntries => this
      .phoneEntries
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $phoneEntries(v) => this.phoneEntries = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelPhoneEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // deviceRegs.
  List<ModelDeviceRegistration>? get deviceRegsField => this.deviceRegs;
  set deviceRegsField(List<ModelDeviceRegistration>? v) => this.deviceRegs = v;
  @protected
  dynamic get $deviceRegs => this
      .deviceRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $deviceRegs(v) => this.deviceRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelDeviceRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // registration.
  ModelRegistration? get registrationField => this.registration;
  set registrationField(ModelRegistration? v) => this.registration = v;
  @protected
  dynamic get $registration => this.registration?.toJson();
  @protected
  set $registration(v) => this.registration = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();

  // clockInRegs.
  List<ModelRegistration>? get clockInRegsField => this.clockInRegs;
  set clockInRegsField(List<ModelRegistration>? v) => this.clockInRegs = v;
  @protected
  dynamic get $clockInRegs => this
      .clockInRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $clockInRegs(v) => this.clockInRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // clockOutRegs.
  List<ModelRegistration>? get clockOutRegsField => this.clockOutRegs;
  set clockOutRegsField(List<ModelRegistration>? v) => this.clockOutRegs = v;
  @protected
  dynamic get $clockOutRegs => this
      .clockOutRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $clockOutRegs(v) => this.clockOutRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // openedRegs.
  List<ModelRegistration>? get openedRegsField => this.openedRegs;
  set openedRegsField(List<ModelRegistration>? v) => this.openedRegs = v;
  @protected
  dynamic get $openedRegs => this
      .openedRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $openedRegs(v) => this.openedRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // closedRegs.
  List<ModelRegistration>? get closedRegsField => this.closedRegs;
  set closedRegsField(List<ModelRegistration>? v) => this.closedRegs = v;
  @protected
  dynamic get $closedRegs => this
      .closedRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $closedRegs(v) => this.closedRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // todoBook.
  Map<DateTime, ModelTodoEntry>? get todoBookField => this.todoBook;
  set todoBookField(Map<DateTime, ModelTodoEntry>? v) => this.todoBook = v;
  @protected
  dynamic get $todoBook => this
      .todoBook
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toUtc()?.toIso8601String(),
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $todoBook(v) => this.todoBook = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          () {
            final a = p0;
            return a != null ? DateTime.tryParse(a)?.toUtc() : null;
          }(),
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelTodoEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // status.
  JobStatusType? get statusField => this.status;
  set statusField(JobStatusType? v) => this.status = v;
  @protected
  dynamic get $status => this.status?.name;
  @protected
  set $status(v) =>
      this.status = JobStatusType.values.valueOf(letAs<String>(v));
}
