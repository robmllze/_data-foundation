//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_organization_pub.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelOrganizationPub extends _ModelOrganizationPub {
  //
  //
  //

  static const CLASS_NAME = 'ModelOrganizationPub';

  @override
  String get $className => CLASS_NAME;

  final String? id;
  final DataRefModel? ref;
  final ModelQueryable? displayName;
  final Color? displayColor;
  final String? description;
  final ModelRegistration? archivedGReg;
  final ModelRegistration? createdGReg;
  final ModelRegistration? deletedGReg;
  final ModelRegistration? updatedGReg;
  final DateTime? expiresAt;
  final ModelQueryable? email;
  final Map<String, ModelAddressEntry>? addressEntries;
  final Map<String, ModelEmailEntry>? emailEntries;
  final Map<String, ModelFileEntry>? fileEntries;
  final Map<String, ModelPhoneEntry>? phoneEntries;
  final List<ModelDeviceRegistration>? deviceRegs;

  //
  //
  //

  const ModelOrganizationPub({
    this.id,
    this.ref,
    this.displayName,
    this.displayColor,
    this.description,
    this.archivedGReg,
    this.createdGReg,
    this.deletedGReg,
    this.updatedGReg,
    this.expiresAt,
    this.email,
    this.addressEntries,
    this.emailEntries,
    this.fileEntries,
    this.phoneEntries,
    this.deviceRegs,
  });

  const ModelOrganizationPub.c2({
    this.id,
    this.ref,
    this.displayName,
    this.displayColor,
    this.description,
    this.archivedGReg,
    this.createdGReg,
    this.deletedGReg,
    this.updatedGReg,
    this.expiresAt,
    this.email,
    this.addressEntries,
    this.emailEntries,
    this.fileEntries,
    this.phoneEntries,
    this.deviceRegs,
  });

  factory ModelOrganizationPub.c3({
    String? id,
    DataRefModel? ref,
    ModelQueryable? displayName,
    Color? displayColor,
    String? description,
    ModelRegistration? archivedGReg,
    ModelRegistration? createdGReg,
    ModelRegistration? deletedGReg,
    ModelRegistration? updatedGReg,
    DateTime? expiresAt,
    ModelQueryable? email,
    Map<String, ModelAddressEntry>? addressEntries,
    Map<String, ModelEmailEntry>? emailEntries,
    Map<String, ModelFileEntry>? fileEntries,
    Map<String, ModelPhoneEntry>? phoneEntries,
    List<ModelDeviceRegistration>? deviceRegs,
  }) {
    return ModelOrganizationPub(
      id: id,
      ref: ref,
      displayName: displayName,
      displayColor: displayColor,
      description: description,
      archivedGReg: archivedGReg,
      createdGReg: createdGReg,
      deletedGReg: deletedGReg,
      updatedGReg: updatedGReg,
      expiresAt: expiresAt,
      email: email,
      addressEntries: addressEntries,
      emailEntries: emailEntries,
      fileEntries: fileEntries,
      phoneEntries: phoneEntries,
      deviceRegs: deviceRegs,
    );
  }

  factory ModelOrganizationPub.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelOrganizationPub.from: $e');
      rethrow;
    }
  }

  static ModelOrganizationPub? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelOrganizationPub.of(
    ModelOrganizationPub other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelOrganizationPub.of: $e');
      rethrow;
    }
  }

  static ModelOrganizationPub? ofOrNull(
    ModelOrganizationPub? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelOrganizationPub.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelOrganizationPub.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelOrganizationPub? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelOrganizationPub.fromJson(decoded);
      } else {
        return const ModelOrganizationPub.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelOrganizationPub.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelOrganizationPub.fromJson: $e');
      rethrow;
    }
  }

  static ModelOrganizationPub? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final id0 = otherData?[ModelOrganizationPubFields.id.name];
      final id = id0?.toString().trim().nullIfEmpty;
      final ref0 = otherData?[ModelOrganizationPubFields.ref.name];
      final ref = () {
        final a = letMap<String, dynamic>(ref0);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();
      final displayName0 =
          otherData?[ModelOrganizationPubFields.displayName.name];
      final displayName = () {
        final a = letMap<String, dynamic>(displayName0);
        return a != null ? ModelQueryable.fromJson(a) : null;
      }();
      final displayColor0 =
          otherData?[ModelOrganizationPubFields.displayColor.name];
      final displayColor = () {
        final a = letAs<int>(displayColor0);
        return a is int ? Color(a) : null;
      }();
      final description0 =
          otherData?[ModelOrganizationPubFields.description.name];
      final description = description0?.toString().trim().nullIfEmpty;
      final archivedGReg0 =
          otherData?[ModelOrganizationPubFields.archivedGReg.name];
      final archivedGReg = () {
        final a = letMap<String, dynamic>(archivedGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final createdGReg0 =
          otherData?[ModelOrganizationPubFields.createdGReg.name];
      final createdGReg = () {
        final a = letMap<String, dynamic>(createdGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final deletedGReg0 =
          otherData?[ModelOrganizationPubFields.deletedGReg.name];
      final deletedGReg = () {
        final a = letMap<String, dynamic>(deletedGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final updatedGReg0 =
          otherData?[ModelOrganizationPubFields.updatedGReg.name];
      final updatedGReg = () {
        final a = letMap<String, dynamic>(updatedGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final expiresAt0 = otherData?[ModelOrganizationPubFields.expiresAt.name];
      final expiresAt = () {
        final a = expiresAt0;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();
      final email0 = otherData?[ModelOrganizationPubFields.email.name];
      final email = () {
        final a = letMap<String, dynamic>(email0);
        return a != null ? ModelQueryable.fromJson(a) : null;
      }();
      final addressEntries0 =
          otherData?[ModelOrganizationPubFields.addressEntries.name];
      final addressEntries = letMap(addressEntries0)
          ?.map(
            (p0, p1) => MapEntry(
              p0?.toString().trim().nullIfEmpty,
              () {
                final a = letMap<String, dynamic>(p1);
                return a != null ? ModelAddressEntry.fromJson(a) : null;
              }(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final emailEntries0 =
          otherData?[ModelOrganizationPubFields.emailEntries.name];
      final emailEntries = letMap(emailEntries0)
          ?.map(
            (p0, p1) => MapEntry(
              p0?.toString().trim().nullIfEmpty,
              () {
                final a = letMap<String, dynamic>(p1);
                return a != null ? ModelEmailEntry.fromJson(a) : null;
              }(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final fileEntries0 =
          otherData?[ModelOrganizationPubFields.fileEntries.name];
      final fileEntries = letMap(fileEntries0)
          ?.map(
            (p0, p1) => MapEntry(
              p0?.toString().trim().nullIfEmpty,
              () {
                final a = letMap<String, dynamic>(p1);
                return a != null ? ModelFileEntry.fromJson(a) : null;
              }(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final phoneEntries0 =
          otherData?[ModelOrganizationPubFields.phoneEntries.name];
      final phoneEntries = letMap(phoneEntries0)
          ?.map(
            (p0, p1) => MapEntry(
              p0?.toString().trim().nullIfEmpty,
              () {
                final a = letMap<String, dynamic>(p1);
                return a != null ? ModelPhoneEntry.fromJson(a) : null;
              }(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final deviceRegs0 =
          otherData?[ModelOrganizationPubFields.deviceRegs.name];
      final deviceRegs = letList(deviceRegs0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? ModelDeviceRegistration.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      return ModelOrganizationPub(
        id: id,
        ref: ref,
        displayName: displayName,
        displayColor: displayColor,
        description: description,
        archivedGReg: archivedGReg,
        createdGReg: createdGReg,
        deletedGReg: deletedGReg,
        updatedGReg: updatedGReg,
        expiresAt: expiresAt,
        email: email,
        addressEntries: addressEntries,
        emailEntries: emailEntries,
        fileEntries: fileEntries,
        phoneEntries: phoneEntries,
        deviceRegs: deviceRegs,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelOrganizationPub.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelOrganizationPub.fromUri: $e');
      rethrow;
    }
  }

  static ModelOrganizationPub? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelOrganizationPub.fromJson(uri.queryParameters);
      } else {
        return const ModelOrganizationPub.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final id0 = this.id?.trim().nullIfEmpty;
      final ref0 = this.ref?.toJson();
      final displayName0 = this.displayName?.toJson();
      final displayColor0 = this.displayColor?.value;
      final description0 = this.description?.trim().nullIfEmpty;
      final archivedGReg0 = this.archivedGReg?.toJson();
      final createdGReg0 = this.createdGReg?.toJson();
      final deletedGReg0 = this.deletedGReg?.toJson();
      final updatedGReg0 = this.updatedGReg?.toJson();
      final expiresAt0 = this.expiresAt?.toUtc()?.toIso8601String();
      final email0 = this.email?.toJson();
      final addressEntries0 = this
          .addressEntries
          ?.map(
            (p0, p1) => MapEntry(
              p0?.trim().nullIfEmpty,
              p1?.toJson(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final emailEntries0 = this
          .emailEntries
          ?.map(
            (p0, p1) => MapEntry(
              p0?.trim().nullIfEmpty,
              p1?.toJson(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final fileEntries0 = this
          .fileEntries
          ?.map(
            (p0, p1) => MapEntry(
              p0?.trim().nullIfEmpty,
              p1?.toJson(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final phoneEntries0 = this
          .phoneEntries
          ?.map(
            (p0, p1) => MapEntry(
              p0?.trim().nullIfEmpty,
              p1?.toJson(),
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final deviceRegs0 = this
          .deviceRegs
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final withNulls = <String, dynamic>{
        ModelOrganizationPubFields.id.name: id0,
        ModelOrganizationPubFields.ref.name: ref0,
        ModelOrganizationPubFields.displayName.name: displayName0,
        ModelOrganizationPubFields.displayColor.name: displayColor0,
        ModelOrganizationPubFields.description.name: description0,
        ModelOrganizationPubFields.archivedGReg.name: archivedGReg0,
        ModelOrganizationPubFields.createdGReg.name: createdGReg0,
        ModelOrganizationPubFields.deletedGReg.name: deletedGReg0,
        ModelOrganizationPubFields.updatedGReg.name: updatedGReg0,
        ModelOrganizationPubFields.expiresAt.name: expiresAt0,
        ModelOrganizationPubFields.email.name: email0,
        ModelOrganizationPubFields.addressEntries.name: addressEntries0,
        ModelOrganizationPubFields.emailEntries.name: emailEntries0,
        ModelOrganizationPubFields.fileEntries.name: fileEntries0,
        ModelOrganizationPubFields.phoneEntries.name: phoneEntries0,
        ModelOrganizationPubFields.deviceRegs.name: deviceRegs0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelOrganizationPub.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelOrganizationPub copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelOrganizationPub.fromJson(c);
  }

  //
  //
  //

  // id.
  String? get idField => this.id;

  // ref.
  DataRefModel? get refField => this.ref;

  // displayName.
  ModelQueryable? get displayNameField => this.displayName;

  // displayColor.
  Color? get displayColorField => this.displayColor;

  // description.
  String? get descriptionField => this.description;

  // archivedGReg.
  ModelRegistration? get archivedGRegField => this.archivedGReg;

  // createdGReg.
  ModelRegistration? get createdGRegField => this.createdGReg;

  // deletedGReg.
  ModelRegistration? get deletedGRegField => this.deletedGReg;

  // updatedGReg.
  ModelRegistration? get updatedGRegField => this.updatedGReg;

  // expiresAt.
  DateTime? get expiresAtField => this.expiresAt;

  // email.
  ModelQueryable? get emailField => this.email;

  // addressEntries.
  Map<String, ModelAddressEntry>? get addressEntriesField =>
      this.addressEntries;

  // emailEntries.
  Map<String, ModelEmailEntry>? get emailEntriesField => this.emailEntries;

  // fileEntries.
  Map<String, ModelFileEntry>? get fileEntriesField => this.fileEntries;

  // phoneEntries.
  Map<String, ModelPhoneEntry>? get phoneEntriesField => this.phoneEntries;

  // deviceRegs.
  List<ModelDeviceRegistration>? get deviceRegsField => this.deviceRegs;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

enum ModelOrganizationPubFields {
  //
  //
  //

  id(
    const Field(
      fieldName: 'id',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  ref(
    const Field(
      fieldName: 'ref',
      fieldType: 'DataRefModel',
      nullable: true,
    ),
  ),
  displayName(
    const Field(
      fieldName: 'displayName',
      fieldType: 'ModelQueryable',
      nullable: true,
    ),
  ),
  displayColor(
    const Field(
      fieldName: 'displayColor',
      fieldType: 'Color',
      nullable: true,
    ),
  ),
  description(
    const Field(
      fieldName: 'description',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  archivedGReg(
    const Field(
      fieldName: 'archivedGReg',
      fieldType: 'ModelRegistration',
      nullable: true,
    ),
  ),
  createdGReg(
    const Field(
      fieldName: 'createdGReg',
      fieldType: 'ModelRegistration',
      nullable: true,
    ),
  ),
  deletedGReg(
    const Field(
      fieldName: 'deletedGReg',
      fieldType: 'ModelRegistration',
      nullable: true,
    ),
  ),
  updatedGReg(
    const Field(
      fieldName: 'updatedGReg',
      fieldType: 'ModelRegistration',
      nullable: true,
    ),
  ),
  expiresAt(
    const Field(
      fieldName: 'expiresAt',
      fieldType: 'DateTime',
      nullable: true,
    ),
  ),
  email(
    const Field(
      fieldName: 'email',
      fieldType: 'ModelQueryable',
      nullable: true,
    ),
  ),
  addressEntries(
    const Field(
      fieldName: 'addressEntries',
      fieldType: 'Map<String, ModelAddressEntry>',
      nullable: true,
    ),
  ),
  emailEntries(
    const Field(
      fieldName: 'emailEntries',
      fieldType: 'Map<String, ModelEmailEntry>',
      nullable: true,
    ),
  ),
  fileEntries(
    const Field(
      fieldName: 'fileEntries',
      fieldType: 'Map<String, ModelFileEntry>',
      nullable: true,
    ),
  ),
  phoneEntries(
    const Field(
      fieldName: 'phoneEntries',
      fieldType: 'Map<String, ModelPhoneEntry>',
      nullable: true,
    ),
  ),
  deviceRegs(
    const Field(
      fieldName: 'deviceRegs',
      fieldType: 'List<ModelDeviceRegistration>',
      nullable: true,
    ),
  );

  //
  //
  //

  final Field field;

  //
  //
  //

  const ModelOrganizationPubFields(this.field);

  //
  //
  //

  String get fieldName => this.field.fieldName!;
}
