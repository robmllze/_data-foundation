//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_event.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelEvent extends _ModelEvent {
  //
  //
  //

  static const CLASS_NAME = 'ModelEvent';

  @override
  String get $className => CLASS_NAME;

  final String? id;
  final DataRefModel? ref;
  final ModelQueryable? displayName;
  final Color? displayColor;
  final String? description;
  final ModelRegistration? archivedGReg;
  final ModelRegistration? createdGReg;
  final ModelRegistration? deletedGReg;
  final ModelRegistration? updatedGReg;
  final DateTime? expiresAt;
  final Set<String>? memberPids;
  final Set<String>? tags;
  final ModelEnum? contentType;
  final Model? content;
  final List<ModelRegistration>? readRegs;
  final List<ModelRegistration>? archivedRegs;
  final List<ModelRegistration>? hiddenRegs;
  final List<ModelRegistration>? likedRegs;
  final List<ModelRegistration>? receivedRegs;

  //
  //
  //

  const ModelEvent({
    this.id,
    this.ref,
    this.displayName,
    this.displayColor,
    this.description,
    this.archivedGReg,
    this.createdGReg,
    this.deletedGReg,
    this.updatedGReg,
    this.expiresAt,
    this.memberPids,
    this.tags,
    this.contentType,
    this.content,
    this.readRegs,
    this.archivedRegs,
    this.hiddenRegs,
    this.likedRegs,
    this.receivedRegs,
  });

  const ModelEvent.c2({
    this.id,
    this.ref,
    this.displayName,
    this.displayColor,
    this.description,
    this.archivedGReg,
    this.createdGReg,
    this.deletedGReg,
    this.updatedGReg,
    this.expiresAt,
    this.memberPids,
    this.tags,
    this.contentType,
    this.content,
    this.readRegs,
    this.archivedRegs,
    this.hiddenRegs,
    this.likedRegs,
    this.receivedRegs,
  });

  factory ModelEvent.c3({
    String? id,
    DataRefModel? ref,
    ModelQueryable? displayName,
    Color? displayColor,
    String? description,
    ModelRegistration? archivedGReg,
    ModelRegistration? createdGReg,
    ModelRegistration? deletedGReg,
    ModelRegistration? updatedGReg,
    DateTime? expiresAt,
    Set<String>? memberPids,
    Set<String>? tags,
    ModelEnum? contentType,
    Model? content,
    List<ModelRegistration>? readRegs,
    List<ModelRegistration>? archivedRegs,
    List<ModelRegistration>? hiddenRegs,
    List<ModelRegistration>? likedRegs,
    List<ModelRegistration>? receivedRegs,
  }) {
    return ModelEvent(
      id: id,
      ref: ref,
      displayName: displayName,
      displayColor: displayColor,
      description: description,
      archivedGReg: archivedGReg,
      createdGReg: createdGReg,
      deletedGReg: deletedGReg,
      updatedGReg: updatedGReg,
      expiresAt: expiresAt,
      memberPids: memberPids,
      tags: tags,
      contentType: contentType,
      content: content,
      readRegs: readRegs,
      archivedRegs: archivedRegs,
      hiddenRegs: hiddenRegs,
      likedRegs: likedRegs,
      receivedRegs: receivedRegs,
    );
  }

  factory ModelEvent.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelEvent.from: $e');
      rethrow;
    }
  }

  static ModelEvent? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelEvent.of(
    ModelEvent other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelEvent.of: $e');
      rethrow;
    }
  }

  static ModelEvent? ofOrNull(
    ModelEvent? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelEvent.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelEvent.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelEvent? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelEvent.fromJson(decoded);
      } else {
        return const ModelEvent.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelEvent.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelEvent.fromJson: $e');
      rethrow;
    }
  }

  static ModelEvent? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final id0 = otherData?[ModelEventFieldNames.id];
      final id = id0?.toString().trim().nullIfEmpty;
      final ref0 = otherData?[ModelEventFieldNames.ref];
      final ref = () {
        final a = letMap<String, dynamic>(ref0);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();
      final displayName0 = otherData?[ModelEventFieldNames.displayName];
      final displayName = () {
        final a = letMap<String, dynamic>(displayName0);
        return a != null ? ModelQueryable.fromJson(a) : null;
      }();
      final displayColor0 = otherData?[ModelEventFieldNames.displayColor];
      final displayColor = () {
        final a = letAs<int>(displayColor0);
        return a is int ? Color(a) : null;
      }();
      final description0 = otherData?[ModelEventFieldNames.description];
      final description = description0?.toString().trim().nullIfEmpty;
      final archivedGReg0 = otherData?[ModelEventFieldNames.archivedGReg];
      final archivedGReg = () {
        final a = letMap<String, dynamic>(archivedGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final createdGReg0 = otherData?[ModelEventFieldNames.createdGReg];
      final createdGReg = () {
        final a = letMap<String, dynamic>(createdGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final deletedGReg0 = otherData?[ModelEventFieldNames.deletedGReg];
      final deletedGReg = () {
        final a = letMap<String, dynamic>(deletedGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final updatedGReg0 = otherData?[ModelEventFieldNames.updatedGReg];
      final updatedGReg = () {
        final a = letMap<String, dynamic>(updatedGReg0);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();
      final expiresAt0 = otherData?[ModelEventFieldNames.expiresAt];
      final expiresAt = () {
        final a = expiresAt0;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();
      final memberPids0 = otherData?[ModelEventFieldNames.memberPids];
      final memberPids = letSet(memberPids0)
          ?.map(
            (p0) => p0?.toString().trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toSet();
      final tags0 = otherData?[ModelEventFieldNames.tags];
      final tags = letSet(tags0)
          ?.map(
            (p0) => p0?.toString().trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toSet();
      final contentType0 = otherData?[ModelEventFieldNames.contentType];
      final contentType = () {
        final a = letMap<String, dynamic>(contentType0);
        return a != null ? ModelEnum.fromJson(a) : null;
      }();
      final content0 = otherData?[ModelEventFieldNames.content];
      final content = () {
        final a = letMap<String, dynamic>(content0);
        return a != null ? Model.fromJson(a) : null;
      }();
      final readRegs0 = otherData?[ModelEventFieldNames.readRegs];
      final readRegs = letList(readRegs0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? ModelRegistration.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final archivedRegs0 = otherData?[ModelEventFieldNames.archivedRegs];
      final archivedRegs = letList(archivedRegs0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? ModelRegistration.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final hiddenRegs0 = otherData?[ModelEventFieldNames.hiddenRegs];
      final hiddenRegs = letList(hiddenRegs0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? ModelRegistration.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final likedRegs0 = otherData?[ModelEventFieldNames.likedRegs];
      final likedRegs = letList(likedRegs0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? ModelRegistration.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final receivedRegs0 = otherData?[ModelEventFieldNames.receivedRegs];
      final receivedRegs = letList(receivedRegs0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? ModelRegistration.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      return ModelEvent(
        id: id,
        ref: ref,
        displayName: displayName,
        displayColor: displayColor,
        description: description,
        archivedGReg: archivedGReg,
        createdGReg: createdGReg,
        deletedGReg: deletedGReg,
        updatedGReg: updatedGReg,
        expiresAt: expiresAt,
        memberPids: memberPids,
        tags: tags,
        contentType: contentType,
        content: content,
        readRegs: readRegs,
        archivedRegs: archivedRegs,
        hiddenRegs: hiddenRegs,
        likedRegs: likedRegs,
        receivedRegs: receivedRegs,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelEvent.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelEvent.fromUri: $e');
      rethrow;
    }
  }

  static ModelEvent? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelEvent.fromJson(uri.queryParameters);
      } else {
        return const ModelEvent.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final id0 = this.id?.trim().nullIfEmpty;
      final ref0 = this.ref?.toJson();
      final displayName0 = this.displayName?.toJson();
      final displayColor0 = this.displayColor?.value;
      final description0 = this.description?.trim().nullIfEmpty;
      final archivedGReg0 = this.archivedGReg?.toJson();
      final createdGReg0 = this.createdGReg?.toJson();
      final deletedGReg0 = this.deletedGReg?.toJson();
      final updatedGReg0 = this.updatedGReg?.toJson();
      final expiresAt0 = this.expiresAt?.toUtc()?.toIso8601String();
      final memberPids0 = this
          .memberPids
          ?.map(
            (p0) => p0?.trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final tags0 = this
          .tags
          ?.map(
            (p0) => p0?.trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final contentType0 = this.contentType?.toJson();
      final content0 = this.content?.toJson();
      final readRegs0 = this
          .readRegs
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final archivedRegs0 = this
          .archivedRegs
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final hiddenRegs0 = this
          .hiddenRegs
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final likedRegs0 = this
          .likedRegs
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final receivedRegs0 = this
          .receivedRegs
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final withNulls = <String, dynamic>{
        ModelEventFieldNames.id: id0,
        ModelEventFieldNames.ref: ref0,
        ModelEventFieldNames.displayName: displayName0,
        ModelEventFieldNames.displayColor: displayColor0,
        ModelEventFieldNames.description: description0,
        ModelEventFieldNames.archivedGReg: archivedGReg0,
        ModelEventFieldNames.createdGReg: createdGReg0,
        ModelEventFieldNames.deletedGReg: deletedGReg0,
        ModelEventFieldNames.updatedGReg: updatedGReg0,
        ModelEventFieldNames.expiresAt: expiresAt0,
        ModelEventFieldNames.memberPids: memberPids0,
        ModelEventFieldNames.tags: tags0,
        ModelEventFieldNames.contentType: contentType0,
        ModelEventFieldNames.content: content0,
        ModelEventFieldNames.readRegs: readRegs0,
        ModelEventFieldNames.archivedRegs: archivedRegs0,
        ModelEventFieldNames.hiddenRegs: hiddenRegs0,
        ModelEventFieldNames.likedRegs: likedRegs0,
        ModelEventFieldNames.receivedRegs: receivedRegs0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelEvent.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelEvent copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelEvent.fromJson(c);
  }

  //
  //
  //

  // id.
  String? get idField => this.id;

  // ref.
  DataRefModel? get refField => this.ref;

  // displayName.
  ModelQueryable? get displayNameField => this.displayName;

  // displayColor.
  Color? get displayColorField => this.displayColor;

  // description.
  String? get descriptionField => this.description;

  // archivedGReg.
  ModelRegistration? get archivedGRegField => this.archivedGReg;

  // createdGReg.
  ModelRegistration? get createdGRegField => this.createdGReg;

  // deletedGReg.
  ModelRegistration? get deletedGRegField => this.deletedGReg;

  // updatedGReg.
  ModelRegistration? get updatedGRegField => this.updatedGReg;

  // expiresAt.
  DateTime? get expiresAtField => this.expiresAt;

  // memberPids.
  Set<String>? get memberPidsField => this.memberPids;

  // tags.
  Set<String>? get tagsField => this.tags;

  // contentType.
  ModelEnum? get contentTypeField => this.contentType;

  // content.
  Model? get contentField => this.content;

  // readRegs.
  List<ModelRegistration>? get readRegsField => this.readRegs;

  // archivedRegs.
  List<ModelRegistration>? get archivedRegsField => this.archivedRegs;

  // hiddenRegs.
  List<ModelRegistration>? get hiddenRegsField => this.hiddenRegs;

  // likedRegs.
  List<ModelRegistration>? get likedRegsField => this.likedRegs;

  // receivedRegs.
  List<ModelRegistration>? get receivedRegsField => this.receivedRegs;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class ModelEventFieldNames {
  //
  //
  //

  static const id = 'id';
  static const ref = 'ref';
  static const displayName = 'displayName';
  static const displayColor = 'displayColor';
  static const description = 'description';
  static const archivedGReg = 'archivedGReg';
  static const createdGReg = 'createdGReg';
  static const deletedGReg = 'deletedGReg';
  static const updatedGReg = 'updatedGReg';
  static const expiresAt = 'expiresAt';
  static const memberPids = 'memberPids';
  static const tags = 'tags';
  static const contentType = 'contentType';
  static const content = 'content';
  static const readRegs = 'readRegs';
  static const archivedRegs = 'archivedRegs';
  static const hiddenRegs = 'hiddenRegs';
  static const likedRegs = 'likedRegs';
  static const receivedRegs = 'receivedRegs';

  //
  //
  //

  const ModelEventFieldNames._();
}
