//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_map_tile.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelMapTile extends Model {
  //
  //
  //

  static const CLASS_NAME = 'ModelMapTile';

  @override
  String get $className => CLASS_NAME;

  final String? source;
  final String? username;
  final String? lightStyleId;
  final String? darkStyleId;
  final String? accessToken;
  final int? tileSize;
  final int? z;
  final int? x;
  final int? y;
  final bool? isHighDpi;

  //
  //
  //

  const ModelMapTile({
    this.source,
    required this.username,
    required this.lightStyleId,
    required this.darkStyleId,
    required this.accessToken,
    required this.tileSize,
    this.z,
    this.x,
    this.y,
    this.isHighDpi,
  });

  const ModelMapTile.c2({
    this.source,
    this.username,
    this.lightStyleId,
    this.darkStyleId,
    this.accessToken,
    this.tileSize,
    this.z,
    this.x,
    this.y,
    this.isHighDpi,
  });

  factory ModelMapTile.c3({
    String? source,
    String? username,
    String? lightStyleId,
    String? darkStyleId,
    String? accessToken,
    int? tileSize,
    int? z,
    int? x,
    int? y,
    bool? isHighDpi,
  }) {
    assert(username != null);
    assert(lightStyleId != null);
    assert(darkStyleId != null);
    assert(accessToken != null);
    assert(tileSize != null);

    return ModelMapTile(
      source: source,
      username: username,
      lightStyleId: lightStyleId,
      darkStyleId: darkStyleId,
      accessToken: accessToken,
      tileSize: tileSize,
      z: z,
      x: x,
      y: y,
      isHighDpi: isHighDpi,
    );
  }

  factory ModelMapTile.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelMapTile.from: $e');
      rethrow;
    }
  }

  static ModelMapTile? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelMapTile.of(
    ModelMapTile other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelMapTile.of: $e');
      rethrow;
    }
  }

  static ModelMapTile? ofOrNull(
    ModelMapTile? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelMapTile.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelMapTile.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelMapTile? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelMapTile.fromJson(decoded);
      } else {
        return const ModelMapTile.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelMapTile.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelMapTile.fromJson: $e');
      rethrow;
    }
  }

  static ModelMapTile? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final source0 = otherData?[ModelMapTileFields.source.name];
      final source = source0?.toString().trim().nullIfEmpty;
      final username0 = otherData?[ModelMapTileFields.username.name];
      final username = username0?.toString().trim().nullIfEmpty;
      final lightStyleId0 = otherData?[ModelMapTileFields.lightStyleId.name];
      final lightStyleId = lightStyleId0?.toString().trim().nullIfEmpty;
      final darkStyleId0 = otherData?[ModelMapTileFields.darkStyleId.name];
      final darkStyleId = darkStyleId0?.toString().trim().nullIfEmpty;
      final accessToken0 = otherData?[ModelMapTileFields.accessToken.name];
      final accessToken = accessToken0?.toString().trim().nullIfEmpty;
      final tileSize0 = otherData?[ModelMapTileFields.tileSize.name];
      final tileSize = letInt(tileSize0);
      final z0 = otherData?[ModelMapTileFields.z.name];
      final z = letInt(z0);
      final x0 = otherData?[ModelMapTileFields.x.name];
      final x = letInt(x0);
      final y0 = otherData?[ModelMapTileFields.y.name];
      final y = letInt(y0);
      final isHighDpi0 = otherData?[ModelMapTileFields.isHighDpi.name];
      final isHighDpi = letBool(isHighDpi0);
      return ModelMapTile(
        source: source,
        username: username,
        lightStyleId: lightStyleId,
        darkStyleId: darkStyleId,
        accessToken: accessToken,
        tileSize: tileSize,
        z: z,
        x: x,
        y: y,
        isHighDpi: isHighDpi,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelMapTile.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelMapTile.fromUri: $e');
      rethrow;
    }
  }

  static ModelMapTile? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelMapTile.fromJson(uri.queryParameters);
      } else {
        return const ModelMapTile.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final source0 = this.source?.trim().nullIfEmpty;
      final username0 = this.username?.trim().nullIfEmpty;
      final lightStyleId0 = this.lightStyleId?.trim().nullIfEmpty;
      final darkStyleId0 = this.darkStyleId?.trim().nullIfEmpty;
      final accessToken0 = this.accessToken?.trim().nullIfEmpty;
      final tileSize0 = this.tileSize;
      final z0 = this.z;
      final x0 = this.x;
      final y0 = this.y;
      final isHighDpi0 = this.isHighDpi;
      final withNulls = <String, dynamic>{
        ModelMapTileFields.source.name: source0,
        ModelMapTileFields.username.name: username0,
        ModelMapTileFields.lightStyleId.name: lightStyleId0,
        ModelMapTileFields.darkStyleId.name: darkStyleId0,
        ModelMapTileFields.accessToken.name: accessToken0,
        ModelMapTileFields.tileSize.name: tileSize0,
        ModelMapTileFields.z.name: z0,
        ModelMapTileFields.x.name: x0,
        ModelMapTileFields.y.name: y0,
        ModelMapTileFields.isHighDpi.name: isHighDpi0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelMapTile.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelMapTile copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelMapTile.fromJson(c);
  }

  //
  //
  //

  // source.
  String? get sourceField => this.source;

  // username.
  String get usernameField => this.username!;

  // lightStyleId.
  String get lightStyleIdField => this.lightStyleId!;

  // darkStyleId.
  String get darkStyleIdField => this.darkStyleId!;

  // accessToken.
  String get accessTokenField => this.accessToken!;

  // tileSize.
  int get tileSizeField => this.tileSize!;

  // z.
  int? get zField => this.z;

  // x.
  int? get xField => this.x;

  // y.
  int? get yField => this.y;

  // isHighDpi.
  bool? get isHighDpiField => this.isHighDpi;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

enum ModelMapTileFields {
  //
  //
  //

  source(
    const Field(
      fieldName: 'source',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  username(
    const Field(
      fieldName: 'username',
      fieldType: 'String',
      nullable: false,
    ),
  ),
  lightStyleId(
    const Field(
      fieldName: 'lightStyleId',
      fieldType: 'String',
      nullable: false,
    ),
  ),
  darkStyleId(
    const Field(
      fieldName: 'darkStyleId',
      fieldType: 'String',
      nullable: false,
    ),
  ),
  accessToken(
    const Field(
      fieldName: 'accessToken',
      fieldType: 'String',
      nullable: false,
    ),
  ),
  tileSize(
    const Field(
      fieldName: 'tileSize',
      fieldType: 'int',
      nullable: false,
    ),
  ),
  z(
    const Field(
      fieldName: 'z',
      fieldType: 'int',
      nullable: true,
    ),
  ),
  x(
    const Field(
      fieldName: 'x',
      fieldType: 'int',
      nullable: true,
    ),
  ),
  y(
    const Field(
      fieldName: 'y',
      fieldType: 'int',
      nullable: true,
    ),
  ),
  isHighDpi(
    const Field(
      fieldName: 'isHighDpi',
      fieldType: 'bool',
      nullable: true,
    ),
  );

  //
  //
  //

  final Field field;

  //
  //
  //

  const ModelMapTileFields(this.field);

  //
  //
  //

  String get fieldName => this.field.fieldName!;
}
