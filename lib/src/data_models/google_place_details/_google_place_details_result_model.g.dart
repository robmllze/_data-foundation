//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'google_place_details.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class GooglePlaceDetailsResultModel extends _GooglePlaceDetailsResultModel {
  //
  //
  //

  static const CLASS_NAME = 'GooglePlaceDetailsResultModel';

  @override
  String get $className => CLASS_NAME;

  final List<GooglePlaceDetailsAddressComponentModel>? addressComponents;
  final String? adrAddress;
  final String? formattedAddress;
  final GooglePlaceDetailsGeometryModel? geometry;
  final String? icon;
  final String? iconBackgroundColor;
  final String? iconMaskBaseUri;
  final String? name;
  final String? placeId;
  final String? reference;
  final List<String>? types;
  final String? url;
  final int? utcOffset;
  final String? vicinity;

  //
  //
  //

  const GooglePlaceDetailsResultModel({
    required this.addressComponents,
    required this.adrAddress,
    required this.formattedAddress,
    required this.geometry,
    required this.icon,
    required this.iconBackgroundColor,
    required this.iconMaskBaseUri,
    required this.name,
    required this.placeId,
    required this.reference,
    required this.types,
    required this.url,
    required this.utcOffset,
    required this.vicinity,
  });

  const GooglePlaceDetailsResultModel.c2({
    this.addressComponents,
    this.adrAddress,
    this.formattedAddress,
    this.geometry,
    this.icon,
    this.iconBackgroundColor,
    this.iconMaskBaseUri,
    this.name,
    this.placeId,
    this.reference,
    this.types,
    this.url,
    this.utcOffset,
    this.vicinity,
  });

  factory GooglePlaceDetailsResultModel.c3({
    List<GooglePlaceDetailsAddressComponentModel>? addressComponents,
    String? adrAddress,
    String? formattedAddress,
    GooglePlaceDetailsGeometryModel? geometry,
    String? icon,
    String? iconBackgroundColor,
    String? iconMaskBaseUri,
    String? name,
    String? placeId,
    String? reference,
    List<String>? types,
    String? url,
    int? utcOffset,
    String? vicinity,
  }) {
    assert(addressComponents != null);
    assert(adrAddress != null);
    assert(formattedAddress != null);
    assert(geometry != null);
    assert(icon != null);
    assert(iconBackgroundColor != null);
    assert(iconMaskBaseUri != null);
    assert(name != null);
    assert(placeId != null);
    assert(reference != null);
    assert(types != null);
    assert(url != null);
    assert(utcOffset != null);
    assert(vicinity != null);
    return GooglePlaceDetailsResultModel(
      addressComponents: addressComponents,
      adrAddress: adrAddress,
      formattedAddress: formattedAddress,
      geometry: geometry,
      icon: icon,
      iconBackgroundColor: iconBackgroundColor,
      iconMaskBaseUri: iconMaskBaseUri,
      name: name,
      placeId: placeId,
      reference: reference,
      types: types,
      url: url,
      utcOffset: utcOffset,
      vicinity: vicinity,
    );
  }

  factory GooglePlaceDetailsResultModel.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlaceDetailsResultModel.from: $e');
      rethrow;
    }
  }

  static GooglePlaceDetailsResultModel? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory GooglePlaceDetailsResultModel.of(
    GooglePlaceDetailsResultModel other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'GooglePlaceDetailsResultModel.of: $e');
      rethrow;
    }
  }

  static GooglePlaceDetailsResultModel? ofOrNull(
    GooglePlaceDetailsResultModel? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory GooglePlaceDetailsResultModel.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'GooglePlaceDetailsResultModel.fromJsonString: $e');
      rethrow;
    }
  }

  static GooglePlaceDetailsResultModel? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return GooglePlaceDetailsResultModel.fromJson(decoded);
      } else {
        return const GooglePlaceDetailsResultModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory GooglePlaceDetailsResultModel.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'GooglePlaceDetailsResultModel.fromJson: $e');
      rethrow;
    }
  }

  static GooglePlaceDetailsResultModel? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final addressComponents0 = otherData?['address_components'];
      final addressComponents = letList(addressComponents0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null
                  ? GooglePlaceDetailsAddressComponentModel.fromJson(a)
                  : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final adrAddress0 = otherData?['adr_address'];
      final adrAddress = adrAddress0?.toString().trim().nullIfEmpty;
      final formattedAddress0 = otherData?['formatted_address'];
      final formattedAddress = formattedAddress0?.toString().trim().nullIfEmpty;
      final geometry0 = otherData?['geometry'];
      final geometry = () {
        final a = letMap<String, dynamic>(geometry0);
        return a != null ? GooglePlaceDetailsGeometryModel.fromJson(a) : null;
      }();
      final icon0 = otherData?['icon'];
      final icon = icon0?.toString().trim().nullIfEmpty;
      final iconBackgroundColor0 = otherData?['icon_background_color'];
      final iconBackgroundColor =
          iconBackgroundColor0?.toString().trim().nullIfEmpty;
      final iconMaskBaseUri0 = otherData?['icon_mask_base_uri'];
      final iconMaskBaseUri = iconMaskBaseUri0?.toString().trim().nullIfEmpty;
      final name0 = otherData?['name'];
      final name = name0?.toString().trim().nullIfEmpty;
      final placeId0 = otherData?['place_id'];
      final placeId = placeId0?.toString().trim().nullIfEmpty;
      final reference0 = otherData?['reference'];
      final reference = reference0?.toString().trim().nullIfEmpty;
      final types0 = otherData?['types'];
      final types = letList(types0)
          ?.map(
            (p0) => p0?.toString().trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final url0 = otherData?['url'];
      final url = url0?.toString().trim().nullIfEmpty;
      final utcOffset0 = otherData?['utc_offset'];
      final utcOffset = letInt(utcOffset0);
      final vicinity0 = otherData?['vicinity'];
      final vicinity = vicinity0?.toString().trim().nullIfEmpty;
      return GooglePlaceDetailsResultModel(
        addressComponents: addressComponents,
        adrAddress: adrAddress,
        formattedAddress: formattedAddress,
        geometry: geometry,
        icon: icon,
        iconBackgroundColor: iconBackgroundColor,
        iconMaskBaseUri: iconMaskBaseUri,
        name: name,
        placeId: placeId,
        reference: reference,
        types: types,
        url: url,
        utcOffset: utcOffset,
        vicinity: vicinity,
      );
    } catch (e) {
      return null;
    }
  }

  factory GooglePlaceDetailsResultModel.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'GooglePlaceDetailsResultModel.fromUri: $e');
      rethrow;
    }
  }

  static GooglePlaceDetailsResultModel? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return GooglePlaceDetailsResultModel.fromJson(uri.queryParameters);
      } else {
        return const GooglePlaceDetailsResultModel.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final addressComponents0 = this
          .addressComponents
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final adrAddress0 = this.adrAddress?.trim().nullIfEmpty;
      final formattedAddress0 = this.formattedAddress?.trim().nullIfEmpty;
      final geometry0 = this.geometry?.toJson();
      final icon0 = this.icon?.trim().nullIfEmpty;
      final iconBackgroundColor0 = this.iconBackgroundColor?.trim().nullIfEmpty;
      final iconMaskBaseUri0 = this.iconMaskBaseUri?.trim().nullIfEmpty;
      final name0 = this.name?.trim().nullIfEmpty;
      final placeId0 = this.placeId?.trim().nullIfEmpty;
      final reference0 = this.reference?.trim().nullIfEmpty;
      final types0 = this
          .types
          ?.map(
            (p0) => p0?.trim().nullIfEmpty,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final url0 = this.url?.trim().nullIfEmpty;
      final utcOffset0 = this.utcOffset;
      final vicinity0 = this.vicinity?.trim().nullIfEmpty;
      final withNulls = mergeMapsDeep([
        {
          'address_components': addressComponents0,
        },
        {
          'adr_address': adrAddress0,
        },
        {
          'formatted_address': formattedAddress0,
        },
        {
          'geometry': geometry0,
        },
        {
          'icon': icon0,
        },
        {
          'icon_background_color': iconBackgroundColor0,
        },
        {
          'icon_mask_base_uri': iconMaskBaseUri0,
        },
        {
          'name': name0,
        },
        {
          'place_id': placeId0,
        },
        {
          'reference': reference0,
        },
        {
          'types': types0,
        },
        {
          'url': url0,
        },
        {
          'utc_offset': utcOffset0,
        },
        {
          'vicinity': vicinity0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'GooglePlaceDetailsResultModel.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  GooglePlaceDetailsResultModel copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return GooglePlaceDetailsResultModel.fromJson(c);
  }

  //
  //
  //

  // addressComponents.
  List<GooglePlaceDetailsAddressComponentModel> get addressComponentsField =>
      this.addressComponents!;

  // adrAddress.
  String get adrAddressField => this.adrAddress!;

  // formattedAddress.
  String get formattedAddressField => this.formattedAddress!;

  // geometry.
  GooglePlaceDetailsGeometryModel get geometryField => this.geometry!;

  // icon.
  String get iconField => this.icon!;

  // iconBackgroundColor.
  String get iconBackgroundColorField => this.iconBackgroundColor!;

  // iconMaskBaseUri.
  String get iconMaskBaseUriField => this.iconMaskBaseUri!;

  // name.
  String get nameField => this.name!;

  // placeId.
  String get placeIdField => this.placeId!;

  // reference.
  String get referenceField => this.reference!;

  // types.
  List<String> get typesField => this.types!;

  // url.
  String get urlField => this.url!;

  // utcOffset.
  int get utcOffsetField => this.utcOffset!;

  // vicinity.
  String get vicinityField => this.vicinity!;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class GooglePlaceDetailsResultModelFieldNames {
  //
  //
  //

  static const addressComponents = 'address_components';
  static const adrAddress = 'adr_address';
  static const formattedAddress = 'formatted_address';
  static const geometry = 'geometry';
  static const icon = 'icon';
  static const iconBackgroundColor = 'icon_background_color';
  static const iconMaskBaseUri = 'icon_mask_base_uri';
  static const name = 'name';
  static const placeId = 'place_id';
  static const reference = 'reference';
  static const types = 'types';
  static const url = 'url';
  static const utcOffset = 'utc_offset';
  static const vicinity = 'vicinity';

  //
  //
  //

  const GooglePlaceDetailsResultModelFieldNames._();
}
