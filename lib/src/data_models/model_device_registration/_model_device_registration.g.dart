//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_device_registration.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelDeviceRegistration extends _ModelDeviceRegistration {
  //
  //
  //

  static const CLASS_NAME = 'ModelDeviceRegistration';

  @override
  String get $className => CLASS_NAME;

  final String? id;
  final DataRefModel? ref;
  final String? registeredBy;
  final DateTime? registeredAt;
  final String? ipV4Address;
  final String? ipV6Address;
  final ModelLocation? location;
  final bool? enabled;
  final DateTime? lastLoggedInAt;
  final String? notificationToken;
  final ModelBasicDeviceInfo? deviceInfo;

  //
  //
  //

  const ModelDeviceRegistration({
    this.id,
    this.ref,
    this.registeredBy,
    this.registeredAt,
    this.ipV4Address,
    this.ipV6Address,
    this.location,
    this.enabled,
    this.lastLoggedInAt,
    this.notificationToken,
    this.deviceInfo,
  });

  const ModelDeviceRegistration.c2({
    this.id,
    this.ref,
    this.registeredBy,
    this.registeredAt,
    this.ipV4Address,
    this.ipV6Address,
    this.location,
    this.enabled,
    this.lastLoggedInAt,
    this.notificationToken,
    this.deviceInfo,
  });

  factory ModelDeviceRegistration.c3({
    String? id,
    DataRefModel? ref,
    String? registeredBy,
    DateTime? registeredAt,
    String? ipV4Address,
    String? ipV6Address,
    ModelLocation? location,
    bool? enabled,
    DateTime? lastLoggedInAt,
    String? notificationToken,
    ModelBasicDeviceInfo? deviceInfo,
  }) {
    return ModelDeviceRegistration(
      id: id,
      ref: ref,
      registeredBy: registeredBy,
      registeredAt: registeredAt,
      ipV4Address: ipV4Address,
      ipV6Address: ipV6Address,
      location: location,
      enabled: enabled,
      lastLoggedInAt: lastLoggedInAt,
      notificationToken: notificationToken,
      deviceInfo: deviceInfo,
    );
  }

  factory ModelDeviceRegistration.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelDeviceRegistration.from: $e');
      rethrow;
    }
  }

  static ModelDeviceRegistration? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelDeviceRegistration.of(
    ModelDeviceRegistration other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelDeviceRegistration.of: $e');
      rethrow;
    }
  }

  static ModelDeviceRegistration? ofOrNull(
    ModelDeviceRegistration? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelDeviceRegistration.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelDeviceRegistration.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelDeviceRegistration? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelDeviceRegistration.fromJson(decoded);
      } else {
        return const ModelDeviceRegistration.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelDeviceRegistration.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelDeviceRegistration.fromJson: $e');
      rethrow;
    }
  }

  static ModelDeviceRegistration? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final id0 = otherData?['id'];
      final id = id0?.toString().trim().nullIfEmpty;
      final ref0 = otherData?['ref'];
      final ref = () {
        final a = letMap<String, dynamic>(ref0);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();
      final registeredBy0 = otherData?['registeredBy'];
      final registeredBy = registeredBy0?.toString().trim().nullIfEmpty;
      final registeredAt0 = otherData?['registeredAt'];
      final registeredAt = () {
        final a = registeredAt0;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();
      final ipV4Address0 = otherData?['ipV4Address'];
      final ipV4Address = ipV4Address0?.toString().trim().nullIfEmpty;
      final ipV6Address0 = otherData?['ipV6Address'];
      final ipV6Address = ipV6Address0?.toString().trim().nullIfEmpty;
      final location0 = otherData?['location'];
      final location = () {
        final a = letMap<String, dynamic>(location0);
        return a != null ? ModelLocation.fromJson(a) : null;
      }();
      final enabled0 = otherData?['enabled'];
      final enabled = letBool(enabled0);
      final lastLoggedInAt0 = otherData?['lastLoggedInAt'];
      final lastLoggedInAt = () {
        final a = lastLoggedInAt0;
        return a != null ? DateTime.tryParse(a)?.toUtc() : null;
      }();
      final notificationToken0 = otherData?['notificationToken'];
      final notificationToken =
          notificationToken0?.toString().trim().nullIfEmpty;
      final deviceInfo0 = otherData?['deviceInfo'];
      final deviceInfo = () {
        final a = letMap<String, dynamic>(deviceInfo0);
        return a != null ? ModelBasicDeviceInfo.fromJson(a) : null;
      }();
      return ModelDeviceRegistration(
        id: id,
        ref: ref,
        registeredBy: registeredBy,
        registeredAt: registeredAt,
        ipV4Address: ipV4Address,
        ipV6Address: ipV6Address,
        location: location,
        enabled: enabled,
        lastLoggedInAt: lastLoggedInAt,
        notificationToken: notificationToken,
        deviceInfo: deviceInfo,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelDeviceRegistration.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelDeviceRegistration.fromUri: $e');
      rethrow;
    }
  }

  static ModelDeviceRegistration? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelDeviceRegistration.fromJson(uri.queryParameters);
      } else {
        return const ModelDeviceRegistration.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final id0 = this.id?.trim().nullIfEmpty;
      final ref0 = this.ref?.toJson();
      final registeredBy0 = this.registeredBy?.trim().nullIfEmpty;
      final registeredAt0 = this.registeredAt?.toUtc()?.toIso8601String();
      final ipV4Address0 = this.ipV4Address?.trim().nullIfEmpty;
      final ipV6Address0 = this.ipV6Address?.trim().nullIfEmpty;
      final location0 = this.location?.toJson();
      final enabled0 = this.enabled;
      final lastLoggedInAt0 = this.lastLoggedInAt?.toUtc()?.toIso8601String();
      final notificationToken0 = this.notificationToken?.trim().nullIfEmpty;
      final deviceInfo0 = this.deviceInfo?.toJson();
      final withNulls = mergeMapsDeep([
        {
          'id': id0,
        },
        {
          'ref': ref0,
        },
        {
          'registeredBy': registeredBy0,
        },
        {
          'registeredAt': registeredAt0,
        },
        {
          'ipV4Address': ipV4Address0,
        },
        {
          'ipV6Address': ipV6Address0,
        },
        {
          'location': location0,
        },
        {
          'enabled': enabled0,
        },
        {
          'lastLoggedInAt': lastLoggedInAt0,
        },
        {
          'notificationToken': notificationToken0,
        },
        {
          'deviceInfo': deviceInfo0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelDeviceRegistration.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelDeviceRegistration copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelDeviceRegistration.fromJson(c);
  }

  //
  //
  //

  // id.
  String? get idField => this.id;

  // ref.
  DataRefModel? get refField => this.ref;

  // registeredBy.
  String? get registeredByField => this.registeredBy;

  // registeredAt.
  DateTime? get registeredAtField => this.registeredAt;

  // ipV4Address.
  String? get ipV4AddressField => this.ipV4Address;

  // ipV6Address.
  String? get ipV6AddressField => this.ipV6Address;

  // location.
  ModelLocation? get locationField => this.location;

  // enabled.
  bool? get enabledField => this.enabled;

  // lastLoggedInAt.
  DateTime? get lastLoggedInAtField => this.lastLoggedInAt;

  // notificationToken.
  String? get notificationTokenField => this.notificationToken;

  // deviceInfo.
  ModelBasicDeviceInfo? get deviceInfoField => this.deviceInfo;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class ModelDeviceRegistrationFieldNames {
  //
  //
  //

  static const id = 'id';
  static const ref = 'ref';
  static const registeredBy = 'registeredBy';
  static const registeredAt = 'registeredAt';
  static const ipV4Address = 'ipV4Address';
  static const ipV6Address = 'ipV6Address';
  static const location = 'location';
  static const enabled = 'enabled';
  static const lastLoggedInAt = 'lastLoggedInAt';
  static const notificationToken = 'notificationToken';
  static const deviceInfo = 'deviceInfo';

  //
  //
  //

  const ModelDeviceRegistrationFieldNames._();
}
