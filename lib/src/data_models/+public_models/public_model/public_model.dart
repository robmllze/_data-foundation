//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY XYZ_GENIE
// See: https://github.com/robmllze/xyz_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

import 'dart:ui';
import 'dart:math' as math;

import '/_common.dart';

part '_public_model.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

const PUBLIC_MODEL_FIELDS = {
  ('ref', DataRefModel),
  ('id?', String),
  ('display_name?', String),
  ('display_name_searchable?', T_SEARCHABLE_STRING),
  ('display_color?', Color),
  ('email?', T_LOWER_CASE_STRING),
  ('created_at?', DateTime),
  ('created_by?', String),
  ('deleted_at?', DateTime),
  ('deleted_by?', String),
  ('description?', String),
  ('address_book?', Map<String, ModelAddressEntry>),
  ('email_book?', Map<String, ModelEmailEntry>),
  ('file_book?', Map<String, ModelFileEntry>),
  ('phone_book?', Map<String, ModelPhoneEntry>),
  ('device_registrations?', Map<String, ModelDeviceRegistration>),
  ('registration?', ModelRegistration),
};

@GenerateModel(fields: PUBLIC_MODEL_FIELDS)
// ignore: unused_element
abstract class _PublicModel {}

extension PublicModelExtension on PublicModel {
  //
  //
  //

  /// Whether this model's [id] is not `null` and not empty.
  bool isIdNotEmpty() {
    return this.id != null && this.id!.isNotEmpty;
  }
  //
  //
  //

  /// Returns all the download URLs for the files in the public model if they
  /// exist, or`null`.
  Iterable<String>? get fileDownloadUrls {
    final a = this.sortedFilesByCreatedAt(ascending: false);
    final b = a?.map((e) => e.downloadUrl.toString()).nullIfEmpty;
    return b;
  }

  //
  //
  //

  /// Returns the avatar image download URL for the public model if it exists,
  /// or `null`.
  String? get avatarImageDownloadUrl {
    return this.avatarImage?.downloadUrl.toString();
  }

  //
  //
  //

  /// Returns the avatar image file entry for the public model if it exists, or
  /// `null`.
  ModelFileEntry? get avatarImage {
    final a = this.sortedFilesByCreatedAt(ascending: false);
    final b = a?.firstWhereOrNull((e) => e.isAvatarImage());
    return b;
  }

  //
  //
  //

  /// Whether the file with the given [fileId] has a `download_url` or not. The
  /// assumption is that if the file has a `download_url`, then it has been
  /// uploaded successfully and is available for download.
  bool IsFileUploadingAssumtion(String fileId) {
    final a = this.fileBook?[fileId];
    final b = a != null && a.downloadUrl == null;
    return b;
  }

  //
  //
  //

  /// Whether the avatar image is being uploaded or not. The assumption is that
  /// if the avatar image has a `download_url`, then it has been uploaded
  /// successfully and is available for download.
  bool isUploadingAvatarImageAssumtion() {
    final a = this.avatarImage;
    final b = a != null && a.downloadUrl == null;
    return b;
  }

  //
  //
  //

  Iterable<ModelFileEntry>? sortedFilesByCreatedAt({bool ascending = true}) {
    return this.fileBook?.values.toList()
      ?..sort((a, b) {
        final now = DateTime.now();
        return (ascending ? 1 : -1) * (a.createdAt ?? now).compareTo((b.createdAt ?? now));
      });
  }

  //
  //
  //

  Iterable<ModelFileEntry>? get profileFiles {
    return this.sortedFilesByCreatedAt(ascending: false)?.where((e) => e.isProfileFile());
  }

  //
  //
  //

  Set<String> get notificationTokens =>
      this.deviceRegistrations?.values.map((e) => e.notificationToken).nonNulls.toSet() ?? {};

  //
  //
  //

  ModelLocation? get lastRegisteredLocation {
    final deviceRegistrations = this.deviceRegistrations?.values;
    final lastLoggedInTimestamps =
        deviceRegistrations?.map((e) => e.lastLoggedInAt?.millisecondsSinceEpoch).nonNulls;
    final lastLoggedInIndex =
        lastLoggedInTimestamps?.toList().indexOf(lastLoggedInTimestamps.reduce(math.max));
    final lastLoggedInRegistration =
        lastLoggedInIndex != null ? deviceRegistrations?.elementAt(lastLoggedInIndex) : null;
    final lastLoggedInLocation = lastLoggedInRegistration?.location?.nullIfInvalid;
    return lastLoggedInLocation?.nullIfInvalid;
  }
}
