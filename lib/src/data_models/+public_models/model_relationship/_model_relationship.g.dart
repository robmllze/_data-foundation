//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_relationship.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelRelationship extends _ModelRelationship {
  //
  //
  //

  static const K_REF = 'ref';
  static const K_ID = 'id';
  static const K_DISPLAY_NAME = 'displayName';
  static const K_DISPLAY_NAME_SEARCHABLE = 'displayNameSearchable';
  static const K_DISPLAY_COLOR = 'displayColor';
  static const K_EMAIL = 'email';
  static const K_CREATED_REG = 'createdReg';
  static const K_DELETED_REG = 'deletedReg';
  static const K_DESCRIPTION = 'description';
  static const K_ADDRESS_BOOK = 'addressBook';
  static const K_EMAIL_BOOK = 'emailBook';
  static const K_FILE_BOOK = 'fileBook';
  static const K_PHONE_BOOK = 'phoneBook';
  static const K_DEVICE_REGS = 'deviceRegs';
  static const K_REGISTRATION = 'registration';
  static const K_MEMBER_PIDS = 'memberPids';
  static const K_DISABLED_REGS = 'disabledRegs';
  static const K_ENABLED_REGS = 'enabledRegs';
  static const K_NOTED_REGS = 'notedRegs';
  static const K_DEF_TYPE = 'defType';
  static const K_DEF = 'def';

  static const CLASS = 'ModelRelationship';

  @override
  String get $class => CLASS;

  DataRefModel? ref;
  String? id;
  String? displayName;
  String? displayNameSearchable;
  Color? displayColor;
  String? email;
  ModelRegistration? createdReg;
  ModelRegistration? deletedReg;
  String? description;
  Map<String, ModelAddressEntry>? addressBook;
  Map<String, ModelEmailEntry>? emailBook;
  Map<String, ModelFileEntry>? fileBook;
  Map<String, ModelPhoneEntry>? phoneBook;
  List<ModelDeviceRegistration>? deviceRegs;
  ModelRegistration? registration;
  Set<String>? memberPids;
  List<ModelRegistration>? disabledRegs;
  List<ModelRegistration>? enabledRegs;
  List<ModelRegistration>? notedRegs;
  RelationshipDefType? defType;
  DataModel? def;

  //
  //
  //

  ModelRelationship.empty();

  //
  //
  //

  factory ModelRelationship({
    required DataRefModel ref,
    String? id,
    String? displayName,
    String? displayNameSearchable,
    Color? displayColor,
    String? email,
    ModelRegistration? createdReg,
    ModelRegistration? deletedReg,
    String? description,
    Map<String, ModelAddressEntry>? addressBook,
    Map<String, ModelEmailEntry>? emailBook,
    Map<String, ModelFileEntry>? fileBook,
    Map<String, ModelPhoneEntry>? phoneBook,
    List<ModelDeviceRegistration>? deviceRegs,
    ModelRegistration? registration,
    Set<String>? memberPids,
    List<ModelRegistration>? disabledRegs,
    List<ModelRegistration>? enabledRegs,
    List<ModelRegistration>? notedRegs,
    RelationshipDefType? defType,
    DataModel? def,
  }) {
    return ModelRelationship.b(
      ref: ref,
      id: id,
      displayName: displayName,
      displayNameSearchable: displayNameSearchable,
      displayColor: displayColor,
      email: email,
      createdReg: createdReg,
      deletedReg: deletedReg,
      description: description,
      addressBook: addressBook,
      emailBook: emailBook,
      fileBook: fileBook,
      phoneBook: phoneBook,
      deviceRegs: deviceRegs,
      registration: registration,
      memberPids: memberPids,
      disabledRegs: disabledRegs,
      enabledRegs: enabledRegs,
      notedRegs: notedRegs,
      defType: defType,
      def: def,
    );
  }

  //
  //
  //

  ModelRelationship.b({
    this.ref,
    this.id,
    this.displayName,
    this.displayNameSearchable,
    this.displayColor,
    this.email,
    this.createdReg,
    this.deletedReg,
    this.description,
    this.addressBook,
    this.emailBook,
    this.fileBook,
    this.phoneBook,
    this.deviceRegs,
    this.registration,
    this.memberPids,
    this.disabledRegs,
    this.enabledRegs,
    this.notedRegs,
    this.defType,
    this.def,
  }) {
    assert(this.ref != null);
  }

  //
  //
  //

  factory ModelRelationship.from(
    Model? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelRelationship.from: $e');
      rethrow;
    }
  }

  static ModelRelationship? fromOrNull(
    Model? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  //
  //
  //

  factory ModelRelationship.of(
    ModelRelationship other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelRelationship.of: $e');
      rethrow;
    }
  }

  static ModelRelationship? ofOrNull(
    ModelRelationship? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  //
  //
  //

  factory ModelRelationship.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelRelationship.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelRelationship? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelRelationship.fromJson(decoded);
      } else {
        return ModelRelationship.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  factory ModelRelationship.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelRelationship.fromJson: $e');
      rethrow;
    }
  }

  static ModelRelationship? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelRelationship.empty()
        ..$ref = otherData?[K_REF]
        ..$id = otherData?[K_ID]
        ..$displayName = otherData?[K_DISPLAY_NAME]
        ..$displayNameSearchable = otherData?[K_DISPLAY_NAME_SEARCHABLE]
        ..$displayColor = otherData?[K_DISPLAY_COLOR]
        ..$email = otherData?[K_EMAIL]
        ..$createdReg = otherData?[K_CREATED_REG]
        ..$deletedReg = otherData?[K_DELETED_REG]
        ..$description = otherData?[K_DESCRIPTION]
        ..$addressBook = otherData?[K_ADDRESS_BOOK]
        ..$emailBook = otherData?[K_EMAIL_BOOK]
        ..$fileBook = otherData?[K_FILE_BOOK]
        ..$phoneBook = otherData?[K_PHONE_BOOK]
        ..$deviceRegs = otherData?[K_DEVICE_REGS]
        ..$registration = otherData?[K_REGISTRATION]
        ..$memberPids = otherData?[K_MEMBER_PIDS]
        ..$disabledRegs = otherData?[K_DISABLED_REGS]
        ..$enabledRegs = otherData?[K_ENABLED_REGS]
        ..$notedRegs = otherData?[K_NOTED_REGS]
        ..$defType = otherData?[K_DEF_TYPE]
        ..$def = otherData?[K_DEF];
    } catch (e) {
      return null;
    }
  }

  //
  //
  //

  factory ModelRelationship.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelRelationship.fromUri: $e');
      rethrow;
    }
  }

  static ModelRelationship? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelRelationship.fromJson(uri.queryParameters);
      } else {
        return ModelRelationship.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_REF: this.$ref,
        K_ID: this.$id,
        K_DISPLAY_NAME: this.$displayName,
        K_DISPLAY_NAME_SEARCHABLE: this.$displayNameSearchable,
        K_DISPLAY_COLOR: this.$displayColor,
        K_EMAIL: this.$email,
        K_CREATED_REG: this.$createdReg,
        K_DELETED_REG: this.$deletedReg,
        K_DESCRIPTION: this.$description,
        K_ADDRESS_BOOK: this.$addressBook,
        K_EMAIL_BOOK: this.$emailBook,
        K_FILE_BOOK: this.$fileBook,
        K_PHONE_BOOK: this.$phoneBook,
        K_DEVICE_REGS: this.$deviceRegs,
        K_REGISTRATION: this.$registration,
        K_MEMBER_PIDS: this.$memberPids,
        K_DISABLED_REGS: this.$disabledRegs,
        K_ENABLED_REGS: this.$enabledRegs,
        K_NOTED_REGS: this.$notedRegs,
        K_DEF_TYPE: this.$defType,
        K_DEF: this.$def,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelRelationship.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelRelationship.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelRelationship.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelRelationship.fromJson(otherData);
      if (other.ref != null) {
        this.ref = other.ref!;
      }
      if (other.id != null) {
        this.id = other.id!;
      }
      if (other.displayName != null) {
        this.displayName = other.displayName!;
      }
      if (other.displayNameSearchable != null) {
        this.displayNameSearchable = other.displayNameSearchable!;
      }
      if (other.displayColor != null) {
        this.displayColor = other.displayColor!;
      }
      if (other.email != null) {
        this.email = other.email!;
      }
      if (other.createdReg != null) {
        this.createdReg = other.createdReg!;
      }
      if (other.deletedReg != null) {
        this.deletedReg = other.deletedReg!;
      }
      if (other.description != null) {
        this.description = other.description!;
      }
      if (other.addressBook != null) {
        this.addressBook = other.addressBook!;
      }
      if (other.emailBook != null) {
        this.emailBook = other.emailBook!;
      }
      if (other.fileBook != null) {
        this.fileBook = other.fileBook!;
      }
      if (other.phoneBook != null) {
        this.phoneBook = other.phoneBook!;
      }
      if (other.deviceRegs != null) {
        this.deviceRegs = other.deviceRegs!;
      }
      if (other.registration != null) {
        this.registration = other.registration!;
      }
      if (other.memberPids != null) {
        this.memberPids = other.memberPids!;
      }
      if (other.disabledRegs != null) {
        this.disabledRegs = other.disabledRegs!;
      }
      if (other.enabledRegs != null) {
        this.enabledRegs = other.enabledRegs!;
      }
      if (other.notedRegs != null) {
        this.notedRegs = other.notedRegs!;
      }
      if (other.defType != null) {
        this.defType = other.defType!;
      }
      if (other.def != null) {
        this.def = other.def!;
      }
    }
  }

  //
  //
  //

  // ref.
  DataRefModel get refField => this.ref!;
  set refField(DataRefModel v) => this.ref = v;
  @protected
  dynamic get $ref => this.ref?.toJson();
  @protected
  set $ref(v) => this.ref = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();

  // id.
  String? get idField => this.id;
  set idField(String? v) => this.id = v;
  @protected
  dynamic get $id => this.id?.toString().trim().nullIfEmpty;
  @protected
  set $id(v) => this.id = v?.toString().trim().nullIfEmpty;

  // displayName.
  String? get displayNameField => this.displayName;
  set displayNameField(String? v) => this.displayName = v;
  @protected
  dynamic get $displayName => this.displayName?.toString().trim().nullIfEmpty;
  @protected
  set $displayName(v) => this.displayName = v?.toString().trim().nullIfEmpty;

  // displayNameSearchable.
  String? get displayNameSearchableField => this.displayNameSearchable;
  set displayNameSearchableField(String? v) => this.displayNameSearchable = v;
  @protected
  dynamic get $displayNameSearchable => this
      .displayNameSearchable
      ?.toString()
      .trim()
      .nullIfEmpty
      ?.toLowerCase()
      .replaceAll(r'[^\w]', '');
  @protected
  set $displayNameSearchable(v) => this.displayNameSearchable =
      v?.toString().trim().nullIfEmpty?.toLowerCase().replaceAll(r'[^\w]', '');

  // displayColor.
  Color? get displayColorField => this.displayColor;
  set displayColorField(Color? v) => this.displayColor = v;
  @protected
  dynamic get $displayColor => this.displayColor?.value;
  @protected
  set $displayColor(v) => this.displayColor = () {
        final a = letAs<int>(v);
        return a is int ? Color(a) : null;
      }();

  // email.
  String? get emailField => this.email;
  set emailField(String? v) => this.email = v;
  @protected
  dynamic get $email =>
      this.email?.toString().trim().nullIfEmpty?.toLowerCase();
  @protected
  set $email(v) => this.email = v?.toString().trim().nullIfEmpty?.toLowerCase();

  // createdReg.
  ModelRegistration? get createdRegField => this.createdReg;
  set createdRegField(ModelRegistration? v) => this.createdReg = v;
  @protected
  dynamic get $createdReg => this.createdReg?.toJson();
  @protected
  set $createdReg(v) => this.createdReg = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();

  // deletedReg.
  ModelRegistration? get deletedRegField => this.deletedReg;
  set deletedRegField(ModelRegistration? v) => this.deletedReg = v;
  @protected
  dynamic get $deletedReg => this.deletedReg?.toJson();
  @protected
  set $deletedReg(v) => this.deletedReg = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();

  // description.
  String? get descriptionField => this.description;
  set descriptionField(String? v) => this.description = v;
  @protected
  dynamic get $description => this.description?.toString().trim().nullIfEmpty;
  @protected
  set $description(v) => this.description = v?.toString().trim().nullIfEmpty;

  // addressBook.
  Map<String, ModelAddressEntry>? get addressBookField => this.addressBook;
  set addressBookField(Map<String, ModelAddressEntry>? v) =>
      this.addressBook = v;
  @protected
  dynamic get $addressBook => this
      .addressBook
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $addressBook(v) => this.addressBook = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelAddressEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // emailBook.
  Map<String, ModelEmailEntry>? get emailBookField => this.emailBook;
  set emailBookField(Map<String, ModelEmailEntry>? v) => this.emailBook = v;
  @protected
  dynamic get $emailBook => this
      .emailBook
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $emailBook(v) => this.emailBook = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelEmailEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // fileBook.
  Map<String, ModelFileEntry>? get fileBookField => this.fileBook;
  set fileBookField(Map<String, ModelFileEntry>? v) => this.fileBook = v;
  @protected
  dynamic get $fileBook => this
      .fileBook
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $fileBook(v) => this.fileBook = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelFileEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // phoneBook.
  Map<String, ModelPhoneEntry>? get phoneBookField => this.phoneBook;
  set phoneBookField(Map<String, ModelPhoneEntry>? v) => this.phoneBook = v;
  @protected
  dynamic get $phoneBook => this
      .phoneBook
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          p1?.toJson(),
        ),
      )
      .nonNulls
      .nullIfEmpty;
  @protected
  set $phoneBook(v) => this.phoneBook = letMap(v)
      ?.map(
        (p0, p1) => MapEntry(
          p0?.toString().trim().nullIfEmpty,
          () {
            final a = letMap<String, dynamic>(p1);
            return a != null ? ModelPhoneEntry.fromJson(a) : null;
          }(),
        ),
      )
      .nonNulls
      .nullIfEmpty
      ?.cast();

  // deviceRegs.
  List<ModelDeviceRegistration>? get deviceRegsField => this.deviceRegs;
  set deviceRegsField(List<ModelDeviceRegistration>? v) => this.deviceRegs = v;
  @protected
  dynamic get $deviceRegs => this
      .deviceRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $deviceRegs(v) => this.deviceRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelDeviceRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // registration.
  ModelRegistration? get registrationField => this.registration;
  set registrationField(ModelRegistration? v) => this.registration = v;
  @protected
  dynamic get $registration => this.registration?.toJson();
  @protected
  set $registration(v) => this.registration = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelRegistration.fromJson(a) : null;
      }();

  // memberPids.
  Set<String>? get memberPidsField => this.memberPids;
  set memberPidsField(Set<String>? v) => this.memberPids = v;
  @protected
  dynamic get $memberPids => this
      .memberPids
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $memberPids(v) => this.memberPids = letSet(v)
      ?.map(
        (p0) => p0?.toString().trim().nullIfEmpty,
      )
      .nonNulls
      .nullIfEmpty
      ?.toSet()
      .cast();

  // disabledRegs.
  List<ModelRegistration>? get disabledRegsField => this.disabledRegs;
  set disabledRegsField(List<ModelRegistration>? v) => this.disabledRegs = v;
  @protected
  dynamic get $disabledRegs => this
      .disabledRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $disabledRegs(v) => this.disabledRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // enabledRegs.
  List<ModelRegistration>? get enabledRegsField => this.enabledRegs;
  set enabledRegsField(List<ModelRegistration>? v) => this.enabledRegs = v;
  @protected
  dynamic get $enabledRegs => this
      .enabledRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $enabledRegs(v) => this.enabledRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // notedRegs.
  List<ModelRegistration>? get notedRegsField => this.notedRegs;
  set notedRegsField(List<ModelRegistration>? v) => this.notedRegs = v;
  @protected
  dynamic get $notedRegs => this
      .notedRegs
      ?.map(
        (p0) => p0?.toJson(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList();
  @protected
  set $notedRegs(v) => this.notedRegs = letList(v)
      ?.map(
        (p0) => () {
          final a = letMap<String, dynamic>(p0);
          return a != null ? ModelRegistration.fromJson(a) : null;
        }(),
      )
      .nonNulls
      .nullIfEmpty
      ?.toList()
      .cast();

  // defType.
  RelationshipDefType? get defTypeField => this.defType;
  set defTypeField(RelationshipDefType? v) => this.defType = v;
  @protected
  dynamic get $defType => this.defType?.name;
  @protected
  set $defType(v) =>
      this.defType = RelationshipDefType.values.valueOf(letAs<String>(v));

  // def.
  DataModel? get defField => this.def;
  set defField(DataModel? v) => this.def = v;
  @protected
  dynamic get $def => this.def?.data;
  @protected
  set $def(v) => this.def = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? DataModel(data: a) : null;
      }();
}
