//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_display.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelDisplay extends _ModelDisplay {
  //
  //
  //

  static const K_ID = 'id';
  static const K_REF = 'ref';
  static const K_DISPLAY_NAME = 'displayName';
  static const K_DISPLAY_COLOR = 'displayColor';
  static const K_DESCRIPTION = 'description';

  static const CLASS = 'ModelDisplay';

  @override
  String get $class => CLASS;

  String? id;
  DataRefModel? ref;
  ModelQueryable? displayName;
  Color? displayColor;
  String? description;

  //
  //
  //

  ModelDisplay.empty();

  //
  //
  //

  factory ModelDisplay({
    String? id,
    DataRefModel? ref,
    ModelQueryable? displayName,
    Color? displayColor,
    String? description,
  }) {
    return ModelDisplay.b(
      id: id,
      ref: ref,
      displayName: displayName,
      displayColor: displayColor,
      description: description,
    );
  }

  //
  //
  //

  ModelDisplay.b({
    this.id,
    this.ref,
    this.displayName,
    this.displayColor,
    this.description,
  }) {}

  //
  //
  //

  factory ModelDisplay.from(
    Model? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelDisplay.from: $e');
      rethrow;
    }
  }

  static ModelDisplay? fromOrNull(
    Model? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  //
  //
  //

  factory ModelDisplay.of(
    ModelDisplay other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelDisplay.of: $e');
      rethrow;
    }
  }

  static ModelDisplay? ofOrNull(
    ModelDisplay? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  //
  //
  //

  factory ModelDisplay.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelDisplay.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelDisplay? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelDisplay.fromJson(decoded);
      } else {
        return ModelDisplay.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  factory ModelDisplay.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelDisplay.fromJson: $e');
      rethrow;
    }
  }

  static ModelDisplay? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelDisplay.empty()
        ..$id = otherData?[K_ID]
        ..$ref = otherData?[K_REF]
        ..$displayName = otherData?[K_DISPLAY_NAME]
        ..$displayColor = otherData?[K_DISPLAY_COLOR]
        ..$description = otherData?[K_DESCRIPTION];
    } catch (e) {
      return null;
    }
  }

  //
  //
  //

  factory ModelDisplay.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelDisplay.fromUri: $e');
      rethrow;
    }
  }

  static ModelDisplay? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return ModelDisplay.fromJson(uri.queryParameters);
      } else {
        return ModelDisplay.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_ID: this.$id,
        K_REF: this.$ref,
        K_DISPLAY_NAME: this.$displayName,
        K_DISPLAY_COLOR: this.$displayColor,
        K_DESCRIPTION: this.$description,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelDisplay.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelDisplay.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelDisplay.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelDisplay.fromJson(otherData);
      if (other.id != null) {
        this.id = other.id!;
      }
      if (other.ref != null) {
        this.ref = other.ref!;
      }
      if (other.displayName != null) {
        this.displayName = other.displayName!;
      }
      if (other.displayColor != null) {
        this.displayColor = other.displayColor!;
      }
      if (other.description != null) {
        this.description = other.description!;
      }
    }
  }

  //
  //
  //

  // id.
  String? get idField => this.id;
  set idField(String? v) => this.id = v;
  @protected
  dynamic get $id => this.id?.toString().trim().nullIfEmpty;
  @protected
  set $id(v) => this.id = v?.toString().trim().nullIfEmpty;

  // ref.
  DataRefModel? get refField => this.ref;
  set refField(DataRefModel? v) => this.ref = v;
  @protected
  dynamic get $ref => this.ref?.toJson();
  @protected
  set $ref(v) => this.ref = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();

  // displayName.
  ModelQueryable? get displayNameField => this.displayName;
  set displayNameField(ModelQueryable? v) => this.displayName = v;
  @protected
  dynamic get $displayName => this.displayName?.toJson();
  @protected
  set $displayName(v) => this.displayName = () {
        final a = letMap<String, dynamic>(v);
        return a != null ? ModelQueryable.fromJson(a) : null;
      }();

  // displayColor.
  Color? get displayColorField => this.displayColor;
  set displayColorField(Color? v) => this.displayColor = v;
  @protected
  dynamic get $displayColor => this.displayColor?.value;
  @protected
  set $displayColor(v) => this.displayColor = () {
        final a = letAs<int>(v);
        return a is int ? Color(a) : null;
      }();

  // description.
  String? get descriptionField => this.description;
  set descriptionField(String? v) => this.description = v;
  @protected
  dynamic get $description => this.description?.toString().trim().nullIfEmpty;
  @protected
  set $description(v) => this.description = v?.toString().trim().nullIfEmpty;
}
