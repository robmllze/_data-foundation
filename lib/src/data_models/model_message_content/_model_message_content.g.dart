//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_message_content.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelMessageContent extends Model {
  //
  //
  //

  static const CLASS_NAME = 'ModelMessageContent';

  @override
  String get $className => CLASS_NAME;

  final String? relationshipId;
  final String? senderPid;
  final String? receiverPid;
  final String? message;

  //
  //
  //

  const ModelMessageContent({
    this.relationshipId,
    this.senderPid,
    this.receiverPid,
    this.message,
  });

  const ModelMessageContent.c2({
    this.relationshipId,
    this.senderPid,
    this.receiverPid,
    this.message,
  });

  factory ModelMessageContent.c3({
    String? relationshipId,
    String? senderPid,
    String? receiverPid,
    String? message,
  }) {
    return ModelMessageContent(
      relationshipId: relationshipId,
      senderPid: senderPid,
      receiverPid: receiverPid,
      message: message,
    );
  }

  factory ModelMessageContent.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelMessageContent.from: $e');
      rethrow;
    }
  }

  static ModelMessageContent? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelMessageContent.of(
    ModelMessageContent other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelMessageContent.of: $e');
      rethrow;
    }
  }

  static ModelMessageContent? ofOrNull(
    ModelMessageContent? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelMessageContent.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelMessageContent.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelMessageContent? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelMessageContent.fromJson(decoded);
      } else {
        return const ModelMessageContent.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelMessageContent.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelMessageContent.fromJson: $e');
      rethrow;
    }
  }

  static ModelMessageContent? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final relationshipId0 = otherData?['relationshipId'];
      final relationshipId = relationshipId0?.toString().trim().nullIfEmpty;
      final senderPid0 = otherData?['senderPid'];
      final senderPid = senderPid0?.toString().trim().nullIfEmpty;
      final receiverPid0 = otherData?['receiverPid'];
      final receiverPid = receiverPid0?.toString().trim().nullIfEmpty;
      final message0 = otherData?['message'];
      final message = message0?.toString().trim().nullIfEmpty;
      return ModelMessageContent(
        relationshipId: relationshipId,
        senderPid: senderPid,
        receiverPid: receiverPid,
        message: message,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelMessageContent.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelMessageContent.fromUri: $e');
      rethrow;
    }
  }

  static ModelMessageContent? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelMessageContent.fromJson(uri.queryParameters);
      } else {
        return const ModelMessageContent.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final relationshipId0 = this.relationshipId?.trim().nullIfEmpty;
      final senderPid0 = this.senderPid?.trim().nullIfEmpty;
      final receiverPid0 = this.receiverPid?.trim().nullIfEmpty;
      final message0 = this.message?.trim().nullIfEmpty;
      final withNulls = mergeMapsDeep([
        {
          'relationshipId': relationshipId0,
        },
        {
          'senderPid': senderPid0,
        },
        {
          'receiverPid': receiverPid0,
        },
        {
          'message': message0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelMessageContent.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelMessageContent copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelMessageContent.fromJson(c);
  }

  //
  //
  //

  // relationshipId.
  String? get relationshipIdField => this.relationshipId;

  // senderPid.
  String? get senderPidField => this.senderPid;

  // receiverPid.
  String? get receiverPidField => this.receiverPid;

  // message.
  String? get messageField => this.message;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class ModelMessageContentFieldNames {
  //
  //
  //

  static const relationshipId = 'relationshipId';
  static const senderPid = 'senderPid';
  static const receiverPid = 'receiverPid';
  static const message = 'message';

  //
  //
  //

  const ModelMessageContentFieldNames._();
}
