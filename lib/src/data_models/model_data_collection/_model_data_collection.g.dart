//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_data_collection.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelDataCollection extends _ModelDataCollection {
  //
  //
  //

  static const CLASS_NAME = 'ModelDataCollection';

  @override
  String get $className => CLASS_NAME;

  final DataRefModel? ref;
  final Set<DataRefModel>? documents;

  //
  //
  //

  const ModelDataCollection({
    required this.ref,
    this.documents,
  });

  const ModelDataCollection.c2({
    this.ref,
    this.documents,
  });

  factory ModelDataCollection.c3({
    DataRefModel? ref,
    Set<DataRefModel>? documents,
  }) {
    assert(ref != null);

    return ModelDataCollection(
      ref: ref,
      documents: documents,
    );
  }

  factory ModelDataCollection.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelDataCollection.from: $e');
      rethrow;
    }
  }

  static ModelDataCollection? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelDataCollection.of(
    ModelDataCollection other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelDataCollection.of: $e');
      rethrow;
    }
  }

  static ModelDataCollection? ofOrNull(
    ModelDataCollection? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelDataCollection.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelDataCollection.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelDataCollection? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelDataCollection.fromJson(decoded);
      } else {
        return const ModelDataCollection.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelDataCollection.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelDataCollection.fromJson: $e');
      rethrow;
    }
  }

  static ModelDataCollection? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final ref0 = otherData?['ref'];
      final ref = () {
        final a = letMap<String, dynamic>(ref0);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();
      final documents0 = otherData?['documents'];
      final documents = letSet(documents0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? DataRefModel.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toSet();
      return ModelDataCollection(
        ref: ref,
        documents: documents,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelDataCollection.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelDataCollection.fromUri: $e');
      rethrow;
    }
  }

  static ModelDataCollection? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelDataCollection.fromJson(uri.queryParameters);
      } else {
        return const ModelDataCollection.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final ref0 = this.ref?.toJson();
      final documents0 = this
          .documents
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final withNulls = mergeMapsDeep([
        {
          'ref': ref0,
        },
        {
          'documents': documents0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelDataCollection.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelDataCollection copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelDataCollection.fromJson(c);
  }

  //
  //
  //

  // ref.
  DataRefModel get refField => this.ref!;

  // documents.
  Set<DataRefModel>? get documentsField => this.documents;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class ModelDataCollectionFieldNames {
  //
  //
  //

  static const ref = 'ref';
  static const documents = 'documents';

  //
  //
  //

  const ModelDataCollectionFieldNames._();
}
