//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_auth_user.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelAuthUser extends _ModelAuthUser {
  //
  //
  //

  static const CLASS_NAME = 'ModelAuthUser';

  @override
  String get $className => CLASS_NAME;

  final DataRefModel? ref;
  final String? id;
  final String? email;
  final String? password;
  final String? idToken;
  final String? displayName;
  final String? photoUrl;
  final bool? emailVerified;

  //
  //
  //

  const ModelAuthUser({
    this.ref,
    this.id,
    this.email,
    this.password,
    this.idToken,
    this.displayName,
    this.photoUrl,
    this.emailVerified,
  });

  const ModelAuthUser.c2({
    this.ref,
    this.id,
    this.email,
    this.password,
    this.idToken,
    this.displayName,
    this.photoUrl,
    this.emailVerified,
  });

  factory ModelAuthUser.c3({
    DataRefModel? ref,
    String? id,
    String? email,
    String? password,
    String? idToken,
    String? displayName,
    String? photoUrl,
    bool? emailVerified,
  }) {
    return ModelAuthUser(
      ref: ref,
      id: id,
      email: email,
      password: password,
      idToken: idToken,
      displayName: displayName,
      photoUrl: photoUrl,
      emailVerified: emailVerified,
    );
  }

  factory ModelAuthUser.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelAuthUser.from: $e');
      rethrow;
    }
  }

  static ModelAuthUser? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelAuthUser.of(
    ModelAuthUser other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelAuthUser.of: $e');
      rethrow;
    }
  }

  static ModelAuthUser? ofOrNull(
    ModelAuthUser? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelAuthUser.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelAuthUser.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelAuthUser? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelAuthUser.fromJson(decoded);
      } else {
        return const ModelAuthUser.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelAuthUser.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelAuthUser.fromJson: $e');
      rethrow;
    }
  }

  static ModelAuthUser? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final ref0 = otherData?[ModelAuthUserFields.ref.name];
      final ref = () {
        final a = letMap<String, dynamic>(ref0);
        return a != null ? DataRefModel.fromJson(a) : null;
      }();
      final id0 = otherData?[ModelAuthUserFields.id.name];
      final id = id0?.toString().trim().nullIfEmpty;
      final email0 = otherData?[ModelAuthUserFields.email.name];
      final email = email0?.toString().trim().nullIfEmpty;
      final password0 = otherData?[ModelAuthUserFields.password.name];
      final password = password0?.toString().trim().nullIfEmpty;
      final idToken0 = otherData?[ModelAuthUserFields.idToken.name];
      final idToken = idToken0?.toString().trim().nullIfEmpty;
      final displayName0 = otherData?[ModelAuthUserFields.displayName.name];
      final displayName = displayName0?.toString().trim().nullIfEmpty;
      final photoUrl0 = otherData?[ModelAuthUserFields.photoUrl.name];
      final photoUrl = photoUrl0?.toString().trim().nullIfEmpty;
      final emailVerified0 = otherData?[ModelAuthUserFields.emailVerified.name];
      final emailVerified = letBool(emailVerified0);
      return ModelAuthUser(
        ref: ref,
        id: id,
        email: email,
        password: password,
        idToken: idToken,
        displayName: displayName,
        photoUrl: photoUrl,
        emailVerified: emailVerified,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelAuthUser.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelAuthUser.fromUri: $e');
      rethrow;
    }
  }

  static ModelAuthUser? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelAuthUser.fromJson(uri.queryParameters);
      } else {
        return const ModelAuthUser.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final ref0 = this.ref?.toJson();
      final id0 = this.id?.trim().nullIfEmpty;
      final email0 = this.email?.trim().nullIfEmpty;
      final password0 = this.password?.trim().nullIfEmpty;
      final idToken0 = this.idToken?.trim().nullIfEmpty;
      final displayName0 = this.displayName?.trim().nullIfEmpty;
      final photoUrl0 = this.photoUrl?.trim().nullIfEmpty;
      final emailVerified0 = this.emailVerified;
      final withNulls = <String, dynamic>{
        ModelAuthUserFields.ref.name: ref0,
        ModelAuthUserFields.id.name: id0,
        ModelAuthUserFields.email.name: email0,
        ModelAuthUserFields.password.name: password0,
        ModelAuthUserFields.idToken.name: idToken0,
        ModelAuthUserFields.displayName.name: displayName0,
        ModelAuthUserFields.photoUrl.name: photoUrl0,
        ModelAuthUserFields.emailVerified.name: emailVerified0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelAuthUser.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelAuthUser copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelAuthUser.fromJson(c);
  }

  //
  //
  //

  // ref.
  DataRefModel? get refField => this.ref;

  // id.
  String? get idField => this.id;

  // email.
  String? get emailField => this.email;

  // password.
  String? get passwordField => this.password;

  // idToken.
  String? get idTokenField => this.idToken;

  // displayName.
  String? get displayNameField => this.displayName;

  // photoUrl.
  String? get photoUrlField => this.photoUrl;

  // emailVerified.
  bool? get emailVerifiedField => this.emailVerified;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

enum ModelAuthUserFields {
  //
  //
  //

  ref(
    const Field(
      fieldName: 'ref',
      fieldType: 'DataRefModel',
      nullable: true,
    ),
  ),
  id(
    const Field(
      fieldName: 'id',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  email(
    const Field(
      fieldName: 'email',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  password(
    const Field(
      fieldName: 'password',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  idToken(
    const Field(
      fieldName: 'idToken',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  displayName(
    const Field(
      fieldName: 'displayName',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  photoUrl(
    const Field(
      fieldName: 'photoUrl',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  emailVerified(
    const Field(
      fieldName: 'emailVerified',
      fieldType: 'bool',
      nullable: true,
    ),
  );

  //
  //
  //

  final Field field;

  //
  //
  //

  const ModelAuthUserFields(this.field);

  //
  //
  //

  String get fieldName => this.field.fieldName!;
}
