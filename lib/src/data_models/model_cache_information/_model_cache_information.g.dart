//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_cache_information.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class ModelCacheInformation extends _ModelCacheInformation {
  //
  //
  //

  static const CLASS_NAME = 'ModelCacheInformation';

  @override
  String get $className => CLASS_NAME;

  final Set<ModelFileEntry>? files;

  //
  //
  //

  const ModelCacheInformation({
    required this.files,
  });

  const ModelCacheInformation.c2({
    this.files,
  });

  factory ModelCacheInformation.c3({
    Set<ModelFileEntry>? files,
  }) {
    assert(files != null);
    return ModelCacheInformation(
      files: files,
    );
  }

  factory ModelCacheInformation.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelCacheInformation.from: $e');
      rethrow;
    }
  }

  static ModelCacheInformation? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelCacheInformation.of(
    ModelCacheInformation other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelCacheInformation.of: $e');
      rethrow;
    }
  }

  static ModelCacheInformation? ofOrNull(
    ModelCacheInformation? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelCacheInformation.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelCacheInformation.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelCacheInformation? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelCacheInformation.fromJson(decoded);
      } else {
        return const ModelCacheInformation.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelCacheInformation.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelCacheInformation.fromJson: $e');
      rethrow;
    }
  }

  static ModelCacheInformation? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final files0 = otherData?[ModelCacheInformationFieldNames.files];
      final files = letSet(files0)
          ?.map(
            (p0) => () {
              final a = letMap<String, dynamic>(p0);
              return a != null ? ModelFileEntry.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toSet();
      return ModelCacheInformation(
        files: files,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelCacheInformation.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelCacheInformation.fromUri: $e');
      rethrow;
    }
  }

  static ModelCacheInformation? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelCacheInformation.fromJson(uri.queryParameters);
      } else {
        return const ModelCacheInformation.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final files0 = this
          .files
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final withNulls = <String, dynamic>{
        ModelCacheInformationFieldNames.files: files0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelCacheInformation.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelCacheInformation copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return ModelCacheInformation.fromJson(c);
  }

  //
  //
  //

  // files.
  Set<ModelFileEntry> get filesField => this.files!;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class ModelCacheInformationFieldNames {
  //
  //
  //

  static const files = 'files';

  //
  //
  //

  const ModelCacheInformationFieldNames._();
}
